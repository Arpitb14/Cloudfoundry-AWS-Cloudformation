{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Elastic Load Balancer v2",

  "Parameters": {
    "DeploymentName": {
      "Type": "String",
      "Description": "Deployment Name",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "^([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]$",
      "ConstraintDescription": "Must be a valid domain label matching /^([A-Za-z0-9]+[A-Za-z0-9-])+[A-Za-z0-9]$/"
    },

    "ApplicationElbTimeout": {
      "Type": "Number",
      "Default": "30",
      "Description": "Application ELB Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "ApplicationElbHealthCheckInternal": {
      "Type": "Number",
      "Default": "30",
      "Description": "Application ELB Health Check Interval",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "ApplicationElbHealthCheckTimeout": {
      "Type": "Number",
      "Default": "10",
      "Description": "Application ELB Health Check Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "ApplicationElbScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "Description": "Application ELB: Internet facing or internal load balancer",
      "AllowedValues": [ "internet-facing", "internal" ]
    },
    "DirectorElbTarget": {
      "Type": "String",
      "Default": "HTTPS:25555/info",
      "Description": "Director ELB Port Check",
      "AllowedPattern": "^((TCP|SSL):[0-9]+|HTTPS?:[0-9]+/.*)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL and port number, eg TCP:22, HTTPS:443"
    },
    "DirectorElbProtocol1": {
      "Type": "String",
      "Default": "TCP",
      "Description": "Director ELB Instance Protocol 1",
      "AllowedPattern": "^(TCP|HTTP|HTTPS|SSL)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL"
    },
    "DirectorElbProtocol2": {
      "Type": "String",
      "Default": "HTTPS",
      "Description": "Director ELB Instance Protocol 2",
      "AllowedPattern": "^(TCP|HTTP|HTTPS|SSL)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL"
    },
    "DirectorElbProtocol3": {
      "Type": "String",
      "Default": "HTTPS",
      "Description": "Director ELB Instance Protocol 3",
      "AllowedPattern": "^(TCP|HTTP|HTTPS|SSL)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL"
    },
    "DirectorElbInstancePort1": {
      "Type": "Number",
      "Default": "22",
      "Description": "Director ELB Instance Port 1",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "DirectorElbInstancePort2": {
      "Type": "Number",
      "Default": "6868",
      "Description": "Director ELB Instance Port 2",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "DirectorElbInstancePort3": {
      "Type": "Number",
      "Default": "25555",
      "Description": "Director ELB Instance Port 3",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "DirectorElbInstanceProtocol1": {
      "Type": "String",
      "Default": "TCP",
      "Description": "Director ELB Instance Protocol 1",
      "AllowedPattern": "^(TCP|HTTP|HTTPS|SSL)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL"
    },
    "DirectorElbInstanceProtocol2": {
      "Type": "String",
      "Default": "HTTPS",
      "Description": "Director ELB Instance Protocol 2",
      "AllowedPattern": "^(TCP|HTTP|HTTPS|SSL)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL"
    },
    "DirectorElbInstanceProtocol3": {
      "Type": "String",
      "Default": "HTTPS",
      "Description": "Director ELB Instance Protocol 3",
      "AllowedPattern": "^(TCP|HTTP|HTTPS|SSL)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL"
    },
    "DirectorElbLoadbalancerPort1": {
      "Type": "Number",
      "Default": "22",
      "Description": "Director ELB Instance Port 1",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "DirectorElbLoadbalancerPort2": {
      "Type": "Number",
      "Default": "6868",
      "Description": "Director ELB Instance Port 2",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "DirectorElbLoadbalancerPort3": {
      "Type": "Number",
      "Default": "25555",
      "Description": "Director ELB Instance Port 3",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "DirectorElbHealthyThreshold": {
      "Type": "Number",
      "Default": "2",
      "Description": "Director ELB Healthy Threshold",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "DirectorElbUnhealthyThreshold": {
      "Type": "Number",
      "Default": "2",
      "Description": "Director ELB Unhealth Threshold",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "DirectorElbHealthCheckInternal": {
      "Type": "Number",
      "Default": "30",
      "Description": "Director ELB Health Check Interval",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "DirectorElbHealthCheckTimeout": {
      "Type": "Number",
      "Default": "10",
      "Description": "Director ELB Health Check Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "DirectorElbScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "Description": "Application ELB: Internet facing or internal load balancer",
      "AllowedValues": [ "internet-facing", "internal" ]
    },

    "GenerateSslCertificate": {
      "Type": "String",
      "Default": "true",
      "Description": "Generate AWS SSL certificate - requires manual intervention to validate request email",
      "AllowedValues": [ "true", "false" ]
    },

    "GenerateSslCertificate": {
      "Type": "String",
      "Default": "true",
      "Description": "Generate AWS SSL certificate - requires manual intervention to validate request email",
      "AllowedValues": [ "true", "false" ]
    },
    "ExistingSslCertificate": {
      "Type": "String",
      "Default": "",
      "Description": "Existing SSL certificate ARN",
      "AllowedPattern": "^(arn:aws::iam::[0-9]+:server-certificate/[0-9]+:[A-Za-z0-9-]+)?$",
      "ConstraintDescription": "AWS ACM SSL certificate ARN or empty"
    },
    "MultiAz": {
      "Type": "String",
      "Default": "true",
      "Description": "Deploy multiple AZs",
      "AllowedValues": [ "true", "false" ]
    },
    "SslValidationDomain": {
      "Type": "String",
      "Default": "",
      "Description": "Domain to send the SSL validation emails to. Should be empty, or a the parent domain of HostedZone",
      "AllowedPattern": "^((([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+[A-Za-z0-9]{2,})?$",
      "ConstraintDescription": "Must be a valid domain name matching /^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+([A-Za-z0-9]{2,}$/ or empty"
    },
    "DeployElb": {
      "Type": "String",
      "Default": "true",
      "Description": "Deploy External ELB",
      "AllowedValues": [ "true", "false" ]
    },
    "SshElbTarget": {
      "Type": "String",
      "Default": "HTTP:2223/",
      "Description": "SSH ELB Port Check",
      "AllowedPattern": "^((TCP|SSL):[0-9]+|HTTPS?:[0-9]+/.*)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL and port number, eg TCP:22, HTTPS:443"
    },
    "SshElbProtocol": {
      "Type": "String",
      "Default": "TCP",
      "Description": "SSH ELB Instance Protocol",
      "AllowedPattern": "^(TCP|HTTP|HTTPS|SSL)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL"
    },
    "SshElbInstancePort": {
      "Type": "Number",
      "Default": "22",
      "Description": "SSH ELB Instance Port",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "SshElbInstanceProtocol": {
      "Type": "String",
      "Default": "TCP",
      "Description": "SSH ELB Instance Protocol",
      "AllowedPattern": "^(TCP|HTTP|HTTPS|SSL)$",
      "ConstraintDescription": "HTTPS, HTTP, TCP, SSL"
    },
    "SshElbLoadbalancerPort": {
      "Type": "Number",
      "Default": "22",
      "Description": "SSH ELB Instance Port",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "SshElbHealthyThreshold": {
      "Type": "Number",
      "Default": "2",
      "Description": "SSH ELB Healthy Threshold",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "SshElbUnhealthyThreshold": {
      "Type": "Number",
      "Default": "2",
      "Description": "SSH ELB Unhealth Threshold",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "SshElbHealthCheckInternal": {
      "Type": "Number",
      "Default": "30",
      "Description": "SSH ELB Health Check Interval",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "SshElbHealthCheckTimeout": {
      "Type": "Number",
      "Default": "10",
      "Description": "SSH ELB Health Check Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "SshElbScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "Description": "Application ELB: Internet facing or internal load balancer",
      "AllowedValues": [ "internet-facing", "internal" ]
    },

    "GenerateSslCertificate": {
      "Type": "String",
      "Default": "true",
      "Description": "Generate AWS SSL certificate - requires manual intervention to validate request email",
      "AllowedValues": [ "true", "false" ]
    },

    "GenerateSslCertificate": {
      "Type": "String",
      "Default": "true",
      "Description": "Generate AWS SSL certificate - requires manual intervention to validate request email",
      "AllowedValues": [ "true", "false" ]
    },
    "ExistingSslCertificate": {
      "Type": "String",
      "Default": "",
      "Description": "Existing SSL certificate ARN",
      "AllowedPattern": "^(arn:aws::iam::[0-9]+:server-certificate/[0-9]+:[A-Za-z0-9-]+)?$",
      "ConstraintDescription": "AWS ACM SSL certificate ARN or empty"
    },
    "MultiAz": {
      "Type": "String",
      "Default": "true",
      "Description": "Deploy multiple AZs",
      "AllowedValues": [ "true", "false" ]
    },
    "SslValidationDomain": {
      "Type": "String",
      "Default": "",
      "Description": "Domain to send the SSL validation emails to. Should be empty, or a the parent domain of HostedZone",
      "AllowedPattern": "^((([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+[A-Za-z0-9]{2,})?$",
      "ConstraintDescription": "Must be a valid domain name matching /^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+([A-Za-z0-9]{2,}$/ or empty"
    },
    "DeployElb": {
      "Type": "String",
      "Default": "true",
      "Description": "Deploy External ELB",
      "AllowedValues": [ "true", "false" ]
    }
  },

  "Outputs": {
    "DirectorElb": {
      "Description": "Director External ELB",
      "Condition": "DeployElb",
      "Value": { "Ref": "DirectorElb" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-DirectorElb" } }
    },
    "DirectorElbDnsName": {
      "Description": "Director ELB DNS Name",
      "Condition": "DeployElb",
      "Value": { "Fn::GetAtt": [ "DirectorElb","DNSName" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-DirectorElbDnsName" } }
    },
    "SshElb": {
      "Description": "SSH External ELB",
      "Condition": "DeployElb",
      "Value": { "Ref": "SshElb" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-SshElb" } }
    },
    "SshElbDnsName": {
      "Description": "SSH ELB DNS Name",
      "Condition": "DeployElb",
      "Value": { "Fn::GetAtt": [ "SshElb","DNSName" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-SshElbDnsName" } }
    },
    "ExternalElb": {
      "Description": "External ELB",
      "Condition": "DeployElb",
      "Value": { "Ref": "ExternalElb" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ExternalElb" } }
    },
    "ElbDnsName": {
      "Description": "ELB DNS Name",
      "Condition": "DeployElb",
      "Value": { "Fn::GetAtt": [ "ExternalElb","DNSName" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ElbDnsName" } }
    },
    "ElbTargetGroup80": {
      "Description": "ELB DNS Name",
      "Condition": "DeployElb",
      "Value": { "Fn::Select": [ "1", { "Fn::Split": [ "/", { "Fn::GetAtt": [ "ElbTargetGroup80", "TargetGroupFullName" ] } ] } ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ElbTargetGroup80" } }
    },
    "ElbTargetGroup443": {
      "Description": "ELB DNS Name",
      "Condition": "SslElb",
      "Value": { "Fn::Select": [ "1", { "Fn::Split": [ "/", { "Fn::GetAtt": [ "ElbTargetGroup443", "TargetGroupFullName" ] } ] } ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ElbTargetGroup443" } }
    },
    "ElbTargetGroup80Arn": {
      "Description": "ELB DNS Name",
      "Condition": "DeployElb",
      "Value": { "Ref": "ElbTargetGroup80" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ElbTargetGroup80Arn" } }
    },
    "ElbTargetGroup443Arn": {
      "Description": "ELB DNS Name",
      "Condition": "DeployElb",
      "Value": { "Ref": "ElbTargetGroup443" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ElbTargetGroup443Arn" } }
    }
  },

  "Conditions": {
    "DeployElb": { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },

    "GenerateSslCertificate": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "GenerateSslCertificate" }, "true" ] },
	{ "Fn::Equals": [ { "Ref": "ExistingSslCertificate" }, "" ] }
      ]
    },
    "SslElb": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },
        {
          "Fn::Or": [
            { "Fn::Equals": [ { "Ref": "GenerateSslCertificate" }, "true" ] },
            { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ExistingSslCertificate" }, "" ] } ] }
          ]
        }
      ]
    },
    "PlainTextElb": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "GenerateSslCertificate" }, "false" ] },
        { "Fn::Equals": [ { "Ref": "ExistingSslCertificate" }, "" ] }
      ]
    },

    "UseHostedZone": { "Fn::Equals": [ { "Ref": "SslValidationDomain" }, "" ] },
    "MultiAz": { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] },
    "MultiAzOrElb": {
      "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] }
      ]
    }
  },

  "Resources": {
    "StackProtection": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "StackArn": { "Ref": "AWS::StackId" },
          "StackProtectionGroup": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-StackProtectionGroup" } },
          "StackDeleteAllowDeny": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-StackDeleteAllowDeny" } },
          "StackUpdateAllowDeny": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-StackUpdateAllowDeny" } }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
              { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-preamble-TemplatesBucketHttpUrl" } },
              "Templates",
              "Stack-Protection.json"
            ]
          ]
        }
      }
    },

    "GeneratedSslCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "GenerateSslCertificate",
      "Properties": {
        "DomainName": { "Fn::Join": [ ".", [ "*.apps", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
        "SubjectAlternativeNames": [ { "Fn::Join": [ ".", [ "*.system", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] } ],
        "DomainValidationOptions": [
          {
            "DomainName": { "Fn::Join": [ ".", [ "*.apps", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
            "ValidationDomain": { "Fn::If": [ "UseHostedZone", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } }, { "Ref": "SslValidationDomain" } ] }
          },
          {
            "DomainName": { "Fn::Join": [ ".", [ "*.system", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
            "ValidationDomain": { "Fn::If": [ "UseHostedZone", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } }, { "Ref": "SslValidationDomain" } ] }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:GeneratedSslCertificate" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "DirectorElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "DeployElb",
      "Properties": {
        "Subnets": [
          { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DmzAz1Subnet" } },
          { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DmzAz2Subnet" } }
        ],
        "Listeners": [
          {
            "InstancePort": { "Ref": "DirectorElbInstancePort1" },
            "InstanceProtocol": { "Ref": "DirectorElbInstanceProtocol1" },
            "LoadBalancerPort": { "Ref": "DirectorElbLoadbalancerPort1" },
            "Protocol": { "Ref": "DirectorElbProtocol1" }
          },
          {
            "InstancePort": { "Ref": "DirectorElbInstancePort2" },
            "InstanceProtocol": { "Ref": "DirectorElbInstanceProtocol2" },
            "LoadBalancerPort": { "Ref": "DirectorElbLoadbalancerPort2" },
            "Protocol": { "Ref": "DirectorElbProtocol2" }
          },
          {
            "InstancePort": { "Ref": "DirectorElbInstancePort3" },
            "InstanceProtocol": { "Ref": "DirectorElbInstanceProtocol3" },
            "LoadBalancerPort": { "Ref": "DirectorElbLoadbalancerPort3" },
            "Protocol": { "Ref": "DirectorElbProtocol3" }
          }
        ],
        "Scheme": { "Ref": "DirectorElbScheme" },
        "HealthCheck": {
          "HealthyThreshold": { "Ref": "DirectorElbHealthyThreshold" },
          "Interval": { "Ref": "DirectorElbHealthCheckInternal" },
          "Target": { "Ref": "DirectorElbTarget" },
          "Timeout": { "Ref": "DirectorElbHealthCheckTimeout" },
          "UnhealthyThreshold": { "Ref": "DirectorElbUnhealthyThreshold" }
        },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DirectorElb" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ],
        "SecurityGroups": [ { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DirectorSecurityGroup" } } ]
      }
    },

    "SshElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "DeployElb",
      "Properties": {
        "Subnets": [
          { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DmzAz1Subnet" } },
          { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DmzAz2Subnet" } }
        ],
        "Listeners": [
          {
            "InstancePort": { "Ref": "SshElbInstancePort" },
            "InstanceProtocol": { "Ref": "SshElbInstanceProtocol" },
            "LoadBalancerPort": { "Ref": "SshElbLoadbalancerPort" },
            "Protocol": { "Ref": "SshElbProtocol" }
          }
        ],
        "Scheme": { "Ref": "SshElbScheme" },
        "HealthCheck": {
          "HealthyThreshold": { "Ref": "SshElbHealthyThreshold" },
          "Interval": { "Ref": "SshElbHealthCheckInternal" },
          "Target": { "Ref": "SshElbTarget" },
          "Timeout": { "Ref": "SshElbHealthCheckTimeout" },
          "UnhealthyThreshold": { "Ref": "SshElbUnhealthyThreshold" }
        },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:SshElb" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ],
        "SecurityGroups": [ { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-SshElbSecurityGroup" } } ]
      }
    },

    "ExternalElb": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Condition": "DeployElb",
      "Properties": {
        "Scheme": { "Ref": "ApplicationElbScheme" },
        "Subnets": [
          { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DmzAz1Subnet" } },
          { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DmzAz2Subnet" } }
        ],
        "LoadBalancerAttributes": [
          { "Key": "idle_timeout.timeout_seconds", "Value": { "Ref": "ApplicationElbTimeout" } }
        ],
        "SecurityGroups": [ { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-LbSecurityGroup" } } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ExternalElb" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "ElbTargetGroup80": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Condition": "DeployElb",
      "Properties": {
        "Port": "80",
        "Protocol": "HTTP",
        "HealthCheckIntervalSeconds": { "Ref": "ApplicationElbHealthCheckInternal" },
        "HealthCheckPath": "/",
        "HealthCheckPort": "80",
        "HealthCheckProtocol": "HTTP",
        "Matcher": { "HttpCode": "404" },
        "HealthCheckTimeoutSeconds": { "Ref": "ApplicationElbHealthCheckTimeout" },
        "Targets": [],
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ElbTargetGroup80" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "ElbTargetGroup443": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Condition": "DeployElb",
      "Properties": {
        "Port": "443",
        "Protocol":"HTTPS",
        "HealthCheckIntervalSeconds": { "Ref": "ApplicationElbHealthCheckInternal" },
        "HealthCheckPath": "/",
        "HealthCheckPort": "443",
        "HealthCheckProtocol": "HTTPS",
        "Matcher": { "HttpCode": "404" },
        "HealthCheckTimeoutSeconds": { "Ref": "ApplicationElbHealthCheckTimeout" },
        "Targets": [],
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ElbTargetGroup443" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "ElbListener80": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ElbTargetGroup80" }
          }
        ],
        "LoadBalancerArn": { "Ref": "ExternalElb" },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "ElbListener443": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Condition": "SslElb",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Fn::If": [
                "GenerateSslCertificate",
                { "Ref": "GeneratedSslCertificate" },
                { "Ref": "ExistingSslCertificate" }
              ]
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ElbTargetGroup443" }
          }
        ],
        "LoadBalancerArn": { "Ref": "ExternalElb" },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    }
  }
}
