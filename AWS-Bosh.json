{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Bosh - v2",

  "Parameters": {
    "DeploymentName": {
      "Type": "String",
      "Default": "v2",
      "Description": "Deployment Name",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "^([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]$",
      "ConstraintDescription": "Must be a valid domain label matching /^([A-Za-z0-9]+[A-Za-z0-9-])+[A-Za-z0-9]$/"
    },
    "AwsRegion": {
      "Type": "String",
      "Default": "eu-central-1",
      "Description": "AWS Region",
      "AllowedPattern": "^[a-z]+-[a-z]+-[0-9]+$",
      "ConstraintDescription": "AWS region"
    },
    "HostedZone": {
      "Type": "String",
      "Description": "DNS Zone",
      "AllowedPattern": "^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+[A-Za-z0-9]{2,}$",
      "ConstraintDescription": "Must be a valid domain name matching /^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+([A-Za-z0-9]{2,}$/"
    },
    "ExternalCidr1": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted External CIDR 1",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "ExternalCidr2": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted External CIDR 2",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "ExternalCidr3": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted External CIDR 3",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "ExternalCidr4": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted External CIDR 4",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "VpcCidr": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "VPC CIDR",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "DmzCidr": {
      "Type": "String",
      "Default": "10.0.0.0/24",
      "Description": "DMZ Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "PrivateCidr": {
      "Type": "String",
      "Default": "10.0.1.0/24",
      "Description": "Private Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "ElastiCacheServicesAzCidr": {
      "Type": "String",
      "Default": "10.0.101.0/24",
      "Description": "ElastiCache Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "NatCidr": {
      "Type": "String",
      "Default": "10.0.2.0/24",
      "Description": "NAT Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "RdsServicesAz1Cidr": {
      "Type": "String",
      "Default": "10.0.111.0/24",
      "Description": "RDS Services Az1 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "RdsServicesAz2Cidr": {
      "Type": "String",
      "Default": "10.0.112.0/24",
      "Description": "RDS Services Az2 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "RabbitmqServicesCidr": {
      "Type": "String",
      "Default": "10.0.4.0/24",
      "Description": "RabbitMQ Services Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "DatabaseInstanceSize": {
      "Type": "String",
      "Default": "db.t2.small",
      "Description": "Database Size",
      "AllowedValues": [
        "db.m4.large",
        "db.m4.xlarge",
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large"
      ]
    },
    "ElastiCacheInstanceSize": {
      "Type": "String",
      "Default": "cache.t2.small",
      "Description": "Cache Size",
      "AllowedValues": [
        "cache.m4.large",
        "cache.m4.xlarge",
        "cache.t2.micro",
        "cache.t2.small",
        "cache.t2.medium",
        "cache.t2.large"
      ]
    },
    "DatabaseStorageSize": {
      "Type": "Number",
      "Default": "5",
      "MinValue": "5",
      "MaxValue": "6144"
    },
    "DatabaseName": {
      "Description" : "Database Name",
      "Default": "rds_database",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "^[A-Za-z][^\"@]*$",
      "ConstraintDescription": "Alphanumeric characters only and must start with a letter"
    },
    "DatabaseUsername": {
      "Type": "String",
      "Default": "postgres",
      "Description": "Database user",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[A-Za-z][A-Za-z0-9]+$",
      "ConstraintDescription": "Alphanumeric characters only and must start with a letter"
    },
    "DatabasePassword": {
      "Type": "String",
      "Default": "password",
      "Description": "Database password",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[^\"@]+$",
      "ConstraintDescription": "Can be any printable ASCII character except \"/\", \"\"\", or \"@\""
    },
    "Organisation": {
      "Type": "String",
      "Description": "Organisation Name",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[A-Za-z0-9 -]+$",
      "ConstraintDescription": "Can be any printable alphanumeric character, spaces or hypens"
    }
  },

  "Outputs": {
    "AwsRegion": {
      "Description": "AWS Region",
      "Value": { "Ref": "AWS::Region" }
    },
    "AwsAvailabilityZone1": {
      "Description": "AWS Availability Zone 1",
      "Value": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] }
    },
    "AwsAvailabilityZone2": {
      "Description": "AWS Availability Zone 2",
      "Value": { "Fn::Select" : [ "1", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] }
    },
    "StackName": {
      "Description": "Stack name",
      "Value": { "Ref": "AWS::StackName" }
    },
    "StackArn": {
      "Description": "Stack ARN",
      "Value": { "Ref": "AWS::StackId" }
    },
    "DeploymentName": {
      "Description": "Deployment name",
      "Value": { "Ref": "DeploymentName" }
    } ,
    "DmzSubnet": {
      "Description": "DMZ Subnet",
      "Value": { "Ref": "DmzSubnet" }
    },
    "DmzCidrPrefix": {
      "Description": "DMZ CIDR Prefix",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "DmzCidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "DmzCidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "DmzCidr" } ] } ] }
          ]
        ]
      }
    },
    "DmzDefaultRoute": {
      "Description": "DMZ Default Route",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "DmzCidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "DmzCidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "DmzCidr" } ] } ] },
            "1"
          ]
        ]
      }
    },
    "NatSubnet": {
      "Description": "NAT Subnet",
      "Value": { "Ref": "NatSubnet" }
    },
    "PrivateSubnet": {
      "Description": "Private Subnet",
      "Value": { "Ref": "PrivateSubnet" }
    },
    "PrivateCidrPrefix": {
      "Description": "Private CIDR",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "PrivateCidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "PrivateCidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "PrivateCidr" } ] } ] }
          ]
        ]
      }
    },
    "PrivateDefaultRoute": {
      "Description": "Private Default Route",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "PrivateCidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "PrivateCidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "PrivateCidr" } ] } ] },
            "1"
          ]
        ]
      }
    },
    "RabbitmqServicesSubnet": {
      "Description": "RabbitMQ Services Subnet",
      "Value": { "Ref": "RabbitmqServicesSubnet" }
    },
    "RabbitmqServicesCidrPrefix": {
      "Description": "RabbitMQ Services CIDR Prefix",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesCidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesCidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesCidr" } ] } ] }
          ]
        ]
      }
    },
    "RabbitmqServicesDefaultRoute": {
      "Description": "RabbitMQ Services Default Route",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesCidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesCidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesCidr" } ] } ] },
            "1"
          ]
        ]
      }
    },
    "ApiDns": {
      "Description": "API DNS name",
      "Value": {
        "Fn::Join": [
          ".", [
            "api",
            "system",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "DirectorDns": {
      "Description": "Director DNS name",
      "Value": {
        "Fn::Join": [
          ".", [
            "director",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "NatDns": {
      "Description": "NAT DNS name",
      "Value": { "Fn::Join": [
          ".", [
            "nat",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "UaaDns": {
      "Description": "API DNS name",
      "Value": {
        "Fn::Join": [
          ".", [
            "uaa",
            "system",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "ElastiCacheServicesAz1Subnet": {
      "Description": "ElastiCache Subnet",
      "Value": { "Ref": "ElastiCacheServicesAzSubnet" }
    },
    "RdsServicesAz1Subnet": {
      "Description": "RDS Services AZ1 Subnet",
      "Value": { "Ref": "RdsServicesAz1Subnet" }
    },
    "RdsServicesAz2Subnet": {
      "Description": "RDS Services AZ2 Subnet",
      "Value": { "Ref": "RdsServicesAz2Subnet" }
    },
    "DatabaseSubnetGroup": {
      "Description": "RDS Database Subnet Group",
      "Value": { "Ref": "DatabaseSubnetGroup" }
    },
    "DatabaseSecurityGroup": {
      "Description": "RDS Database Security Group",
      "Value": { "Ref": "DatabaseSecurityGroup" }
    },
    "DmzSecurityGroups": {
      "Description": "DMZ Security Groups",
      "Value": {
        "Fn::Join": [
          "", [
            "[",
            {
              "Fn::Join": [
                "", [
                  "\"",
                  { "Ref": "DmzSecurityGroup" },
                  "\""
                ]
              ]
            },
            {
              "Fn::If": [
                "PermitExternalCidr1",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistExternalCidr1", "Outputs.DmzSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitExternalCidr2",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistExternalCidr2", "Outputs.DmzSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitExternalCidr3",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistExternalCidr3", "Outputs.DmzSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitExternalCidr4",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistExternalCidr4", "Outputs.DmzSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            "]"
          ]
        ]
      }
    },
    "PrivateSecurityGroups": {
      "Description": "Private Security Groups",
      "Value": {
        "Fn::Join": [
          "", [
            "[",
            {
              "Fn::Join": [
                "", [
                  "\"",
                  { "Ref": "PrivateSecurityGroup" },
                  "\""
                ]
              ]
            },
            {
              "Fn::If": [
                "PermitExternalCidr1",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistExternalCidr1", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitExternalCidr2",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistExternalCidr2", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitExternalCidr3",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistExternalCidr3", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitExternalCidr4",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistExternalCidr4", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            "]"
          ]
        ]
      }
    },
    "RabbitmqServicesSecurityGroups": {
      "Description": "RabbitMQ Services Security Groups",
      "Value": { "Ref": "RabbitmqServicesSecurityGroup" }
    },
    "DomainName": {
      "Description": "Main DNS name",
      "Value": { "Fn::Join": [
          ".", [
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "BoshLitePublicIp": {
      "Description": "Elastic IP 1 - Bosh Lite (Bootstrap)",
      "Value": { "Ref": "BoshLitePublicIp" }
    },
    "HaProxyIp": {
      "Description": "Elastic IP 2 - HA Proxy IP",
      "Value": { "Ref": "HaProxyIp" }
    },
    "NatIp": {
      "Description": "Elastic IP 3 - NAT IP",
      "Value": { "Ref": "NatIp" }
    },
    "DatabaseAddress": {
      "Description": "Database Access Address",
      "Value": { "Fn::GetAtt": [ "Database", "Endpoint.Address" ] }
    },
    "DatabasePort": {
      "Description": "Database Port",
      "Value": { "Fn::GetAtt": [ "Database", "Endpoint.Port" ] }
    },
    "RedisAddress": {
      "Description": "ElastiCache Access Address",
      "Value": { "Fn::GetAtt": [ "ElastiCacheCluster", "RedisEndpoint.Address" ] }
    },
    "RedisPort": {
      "Description": "ElastiCache Port",
      "Value": { "Fn::GetAtt": [ "ElastiCacheCluster", "RedisEndpoint.Port" ] }
    },
    "ElastiCacheBrokerAccessKeyId": {
      "Description": "ElastiCache Broker Access Key Id",
      "Value": { "Ref": "ElastiCacheBrokerAccessKey" }
    },
    "ElastiCacheBrokerAccessKey": {
      "Description": "ElastiCache Broker Access Key",
      "Value": { "Fn::GetAtt": [ "ElastiCacheBrokerAccessKey", "SecretAccessKey" ] }
    },
    "ElastiCacheBrokerUserName": {
      "Description": "ElastiCache Broker User Name",
      "Value": { "Ref": "ElastiCacheBrokerUser" }
    },
    "RdsBrokerAccessKeyId": {
      "Description": "RDS Broker Access Key Id",
      "Value": { "Ref": "RdsBrokerAccessKey" }
    },
    "RdsBrokerAccessKey": {
      "Description": "RDS Broker Access Key",
      "Value": { "Fn::GetAtt": [ "RdsBrokerAccessKey", "SecretAccessKey" ] }
    },
    "RdsBrokerUserName": {
      "Description": "RDS Broker User Name",
      "Value": { "Ref": "RdsBrokerUser" }
    }
  },

  "Conditions": {
    "PermitExternalCidr1": {
      "Fn::Not": [
        { "Fn::Equals": [ "127.0.0.0/8", { "Ref": "ExternalCidr1" } ] }
      ]
    },
    "PermitExternalCidr2": {
      "Fn::Not": [
        { "Fn::Equals": [ "127.0.0.0/8", { "Ref": "ExternalCidr2" } ] }
      ]
    },
    "PermitExternalCidr3": {
      "Fn::Not": [
        { "Fn::Equals": [ "127.0.0.0/8", { "Ref": "ExternalCidr3" } ] }
      ]
    },
    "PermitExternalCidr4": {
      "Fn::Not": [
        { "Fn::Equals": [ "127.0.0.0/8", { "Ref": "ExternalCidr4" } ] }
      ]
    }
  },

  "Resources": {
    "WhitelistExternalCidr1": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitExternalCidr1",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "ExternalCidr1"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "ExternalCidr1" },
          "VpcId": { "Ref": "CloudFoundryVpc" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistExternalCidr2": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitExternalCidr2",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "ExternalCidr2"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "ExternalCidr2" },
          "VpcId": { "Ref": "CloudFoundryVpc" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistExternalCidr3": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitExternalCidr3",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "ExternalCidr3"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "ExternalCidr3" },
          "VpcId": { "Ref": "CloudFoundryVpc" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistExternalCidr4": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitExternalCidr4",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "ExternalCidr4"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "ExternalCidr4" },
          "VpcId": { "Ref": "CloudFoundryVpc" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },

    "CloudFoundryVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref": "VpcCidr" },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": false,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "CloudFoundryVpc"
                ]
              ]
            }
          }
        ]
      }
    },

    "DmzSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "CidrBlock": { "Ref": "DmzCidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "DmzSubnet"
                ]
              ]
            }
          }
        ]
      }
    },
    "ElastiCacheServicesAzSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "CidrBlock": { "Ref": "ElastiCacheServicesAzCidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "ElastiCacheServicesAzSubnet"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "CidrBlock": { "Ref": "PrivateCidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "PrivateSubnet"
                ]
              ]
            }
          }
        ]
      }
    },
    "RabbitmqServicesSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "CidrBlock": { "Ref": "RabbitmqServicesCidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "RabbitmqServicesSubnet"
                ]
              ]
            }
          }
        ]
      }
    },
    "NatSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "CidrBlock": { "Ref": "NatCidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "NatSubnet"
                ]
              ]
            }
          }
        ]
      }
    },
    "RdsServicesAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "CidrBlock": { "Ref": "RdsServicesAz1Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "RdsServicesAz1Subnet"
                ]
              ]
            }
          }
        ]
      }
    },
    "RdsServicesAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ "1", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "CidrBlock": { "Ref": "RdsServicesAz2Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "RdsServicesAz2Subnet"
                ]
              ]
            }
          }
        ]
      }
    },

    "BoshLitePublicIp": {
      "Type": "AWS::EC2::EIP"
    },
    "NatIp": {
      "Type": "AWS::EC2::EIP"
    },
    "HaProxyIp": {
      "Type": "AWS::EC2::EIP"
    },

    "BoshDnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "director",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          {
            "Ref": "BoshLitePublicIp"
          }
        ]
      }
    },
    "SystemDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "system",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          {
            "Ref": "HaProxyIp"
          }
        ]
      }
    },
    "NatDnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "nat",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          {
            "Ref": "NatIp"
          }
        ]
      }
    },
    "AppsDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "apps",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          {
            "Ref": "HaProxyIp"
          }
        ]
      }
    },

    "NatGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatIp", "AllocationId" ] },
        "SubnetId": { "Ref": "NatSubnet" }
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },

    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "DmzInternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" },
        "RouteTableId": { "Ref": "DmzRouteTable" }
      }
    },
    "NatInternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" },
        "RouteTableId": { "Ref": "NatRouteTable" }
      }
    },
    "PrivateInternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NatGateway" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },
    "RabbitmqServicesInternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" },
        "RouteTableId": { "Ref": "RabbitmqServicesRouteTable" }
      }
    },

    "DmzRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DmzRouteTable"
          }
        ]
      }
    },
    "NatRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "NatRouteTable"
          }
        ]
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRouteTable"
          }
        ]
      }
    },
    "RabbitmqServicesRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "RabbitmqServicesRouteTable"
          }
        ]
      }
    },

    "DmzSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "DmzSubnet" },
        "RouteTableId": { "Ref": "DmzRouteTable" }
      }
    },
    "NatSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "NatSubnet" },
        "RouteTableId": { "Ref": "NatRouteTable" }
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },
    "RabbitmqServicesSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "RabbitmqServicesSubnet" },
        "RouteTableId": { "Ref": "RabbitmqServicesRouteTable" }
      }
    },

    "DatabaseSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Database Security Group",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "DatabaseSecurityGroup"
                ]
              ]
            }
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "5432",
            "ToPort": "5432",
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": { "Ref": "PrivateCidr" },
            "FromPort": "5432",
            "ToPort": "5432" ,
            "IpProtocol": "tcp"
          }
        ]
      }
    },

    "DmzSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "DmzInOut",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "DmzSecurityGroup"
                ]
              ]
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "0",
            "ToPort": "65535",
            "IpProtocol": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "0",
            "ToPort": "65535",
            "IpProtocol": "-1"
          },
          {
            "CidrIp": { "Ref": "VpcCidr" },
            "FromPort": "0",
            "ToPort": "65535" ,
            "IpProtocol": "-1"
          }
        ]
      }
    },
    "ElastiCacheSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ElastiCache Security Group",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "ElastiCacheSecurityGroup"
                ]
              ]
            }
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "6379",
            "ToPort": "6379",
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": { "Ref": "PrivateCidr" },
            "FromPort": "6379",
            "ToPort": "6379" ,
            "IpProtocol": "tcp"
          }
        ]
      }
    },
    "PrivateSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InOut",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "PrivateSecurityGroup"
                ]
              ]
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "HaProxyIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "0",
            "ToPort": "65535",
            "IpProtocol": "-1"
          },
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "22",
            "ToPort": "22" ,
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "6868",
            "ToPort": "6868" ,
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "25555",
            "ToPort": "25555" ,
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": { "Ref": "VpcCidr" },
            "FromPort": "0",
            "ToPort": "65535" ,
            "IpProtocol": "-1"
          }
        ]
      }
    },
    "RabbitmqServicesSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "RabbitMQ Services In Out",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "RabbitmqServicesSecurityGroup"
                ]
              ]
            }
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "22",
            "ToPort": "22" ,
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": {
              "Fn::Join": [
                "/",[
                  { "Ref": "NatIp" },
                  "32"
                ]
              ]
            },
            "FromPort": "5671",
            "ToPort": "5672" ,
            "IpProtocol": "tcp"
          }
        ]
      }
    },

    "DatabaseSubnetGroup": {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "Database Subnet Group",
        "SubnetIds" : [
          { "Ref": "RdsServicesAz1Subnet" },
          { "Ref": "RdsServicesAz2Subnet" }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "DatabaseSubnetGroup"
                ]
              ]
            }
          }
        ]
      }
    },
    "ElastiCacheServicesSubnetGroup": {
      "Type" : "AWS::ElastiCache::SubnetGroup",
      "Properties" : {
        "CacheSubnetGroupName" : "ElastiCache Subnet Group",
        "SubnetIds" : [
          { "Ref": "ElastiCacheServicesAzSubnet" }
        ]
      }
    },
    "Database": {
      "Type" : "AWS::RDS::DBInstance",
      "Properties": {
        "DBInstanceIdentifier": {
          "Fn::Join": [
            "-", [
              { "Ref": "DeploymentName" },
              "ApplicationDB"
            ]
          ]
	},
        "DBInstanceClass": { "Ref": "DatabaseInstanceSize" },
        "AllocatedStorage": { "Ref": "DatabaseStorageSize" },
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "Engine": "postgres",
        "DBSubnetGroupName": { "Ref": "DatabaseSubnetGroup" },
        "MasterUsername": { "Ref": "DatabaseUsername" },
        "MasterUserPassword": { "Ref": "DatabasePassword" },
        "VPCSecurityGroups": [ { "Ref": "DatabaseSecurityGroup" } ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "Database"
                ]
              ]
            }
          }
        ]
      }
    },

    "ElastiCacheCluster": {
      "Type" : "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheNodeType": { "Ref": "ElastiCacheInstanceSize" },
        "CacheSubnetGroupName": { "Ref": "ElastiCacheServicesSubnetGroup" },
        "Engine": "redis",
        "NumCacheNodes": 1,
        "VpcSecurityGroupIds": [ { "Ref": "ElastiCacheSecurityGroup" } ],
        "PreferredAvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs": { "Ref": "AwsRegion" } } ] },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":", [
                  { "Ref": "DeploymentName" },
                  "CloudFoundryVpc"
                ]
              ]
            }
          }
        ]
      }
    },

    "ElastiCacheBrokerUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "_", [
                  { "Ref": "DeploymentName" },
                  "CfElastiCachePolicy"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "elasticache:CreateCacheCluster",
                    "elasticache:CreateReplicationGroup",
                    "elasticache:DescribeCacheClusters",
                    "elasticache:ModifyCacheCluster",
                    "elasticache:RebootCacheCluster"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Ref": "ElastiCacheCluster" }
                },
                {
                  "Action": [
                    "iam:GetUser"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RdsBrokerUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "_", [
                  { "Ref": "DeploymentName" },
                  "CfRdsPolicy"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "rds:DescribeDBInstances",
                    "rds:CreateDBInstance",
                    "rds:ModifyDBInstance",
                    "rds:DeleteDBInstance",
                    "rds:DescribeDBClusters",
                    "rds:CreateDBCluster",
                    "rds:ModifyDBCluster",
                    "rds:DeleteDBCluster",
                    "rds:AddTagsToResource"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "iam:GetUser"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "ElastiCacheBrokerAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": { "Ref": "ElastiCacheBrokerUser" }
      }
    },
    "RdsBrokerAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": { "Ref": "RdsBrokerUser" }
      }
    }
  }
}
