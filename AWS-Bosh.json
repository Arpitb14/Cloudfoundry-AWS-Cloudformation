{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Bosh",

  "Parameters": {
    "DeploymentName": {
      "Type": "String",
      "Default": "v2",
      "Description": "Deployment Name",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "^([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]$",
      "ConstraintDescription": "Must be a valid domain label matching /^([A-Za-z0-9]+[A-Za-z0-9-])+[A-Za-z0-9]$/"
    },

    "MultiAz": {
      "Type": "String",
      "Default": "true",
      "Description": "Deploy multiple AZs",
      "AllowedValues": [ "true", "false" ]
    },
    "AwsAvailabilityZones": {
      "Type": "CommaDelimitedList",
      "Default": "0,1,2",
      "Description": "AWS Availability Zones (csv)"
    },
    "ElbTimeout": {
      "Type": "Number",
      "Default": "60",
      "Description": "ELB Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },

    "AllocateLbIp": {
      "Type": "String",
      "Default": "true",
      "Description": "Allocate External IP (eg for HA Proxy)",
      "AllowedValues": [ "true", "false" ]
    },
    "DeployElb": {
      "Type": "String",
      "Default": "true",
      "Description": "Deploy External ELB",
      "AllowedValues": [ "true", "false" ]
    },
    "ElbScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "Description": "Internet facing or internal load balancer?",
      "AllowedValues": [ "internet-facing", "internal" ]
    },
    "CreateElastiCacheNetworks": {
      "Type": "String",
      "Default": "true",
      "Description": "Create ElastiCache Networks",
      "AllowedValues": [ "true", "false" ]
    },
    "CreateRabbitmqNetworks": {
      "Type": "String",
      "Default": "true",
      "Description": "Create RabbitMQ network(s)",
      "AllowedValues": [ "true", "false" ]
    },
    "CreateRdsNetworks": {
      "Type": "String",
      "Default": "true",
      "Description": "Create RDS network(s)",
      "AllowedValues": [ "true", "false" ]
    },

    "GenerateElbSslCertificate": {
      "Type": "String",
      "Default": "true",
      "Description": "Generate AWS SSL certificate - requires manual intervention to validate request email",
      "AllowedValues": [ "true", "false" ]
    },
    "ElbSslCertificateArn": {
      "Type": "String",
      "Default": "NONE",
      "Description": "Use pre-loaded SSL certificate",
      "AllowedPattern": "^(arn:aws::iam::[0-9]+:server-certificate/[0-9]+:[A-Za-z0-9-]+|NONE)$",
      "ConstraintDescription": "AWS ACM SSL certificate ARN or NONE"
    },

    "HostedZone": {
      "Type": "String",
      "Description": "DNS Zone",
      "AllowedPattern": "^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+[A-Za-z0-9]{2,}$",
      "ConstraintDescription": "Must be a valid domain name matching /^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+([A-Za-z0-9]{2,}$/"
    },

    "FullAccessCidr1": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Full Whitelisted Access CIDR 1",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccessCidr2": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Full Whitelisted Access CIDR 2",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccessCidr3": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Full Whitelisted Access CIDR 3",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccessCidr4": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Full Whitelisted Access CIDR 4",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccessCidr5": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Full Whitelisted Access CIDR 5",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccessCidr6": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Full Whitelisted Access CIDR 6",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },


    "HttpAccessCidr1": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted HTTP(S) Access CIDR 1",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "HttpAccessCidr2": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted HTTP(S) Access CIDR 2",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "HttpAccessCidr3": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted HTTP(S) Access CIDR 3",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "HttpAccessCidr4": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted HTTP(S) Access CIDR 4",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },

    "VpcCidr": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "VPC CIDR",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "DmzCidrs": {
      "Type": "CommaDelimitedList",
      "Default": "10.0.10.0/24,10.0.11.0/24",
      "Description": "DMZ CIDRs (x2)"
    },
    "ElastiCacheServicesCidrs": {
      "Type": "CommaDelimitedList",
      "Default": "10.0.20.0/24,10.0.21.0/24",
      "Description": "ElastiCache CIDRs (x2)"
    },
    "NatCidrs": {
      "Type": "CommaDelimitedList",
      "Default": "10.0.30.0/24,10.0.31.0/24,10.0.32.0/24",
      "Description": "NAT CIDRs (x3)"
    },
    "PrivateCidr": {
      "Type": "CommaDelimitedList",
      "Default": "10.0.40.0/24,10.0.41.0/24,10.0.42.0/24",
      "Description": "Private CIDRs (x3)"
    },
    "RabbitmqServicesCidrs": {
      "Type": "CommaDelimitedList",
      "Default": "10.0.50.0/24,10.0.51.0/24",
      "Description": "RabbitMQ Services AZ1 Subnet"
    },
    "RdsServicesCidrs": {
      "Type": "CommaDelimitedList",
      "Default": "10.0.60.0/24,10.0.61.0/24",
      "Description": "RDS Services AZ1 Subnet"
    },
    "RdsInstancePreferredBackupWindow": {
      "Type": "String",
      "Default": "01:00-04:00",
      "Description": "RDS Preferred backup window",
      "AllowedPattern": "^([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]$",
      "ConstraintDescription": "hh24:mi-hh24:mi, eg 23:59-01:24"
    },
    "RdsInstancePreferredMaintenanceWindow": {
      "Type": "String",
      "Default": "Mon:04:00-Mon:06:00",
      "Description": "Cloudfoundry RDS Preferred maintenance window",
      "AllowedPattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun):([0-1][0-9]|2[0-3]):[0-5][0-9]-(Mon|Tue|Wed|Thu|Fri|Sat|Sun):([0-1][0-9]|2[0-3]):[0-5][0-9]$",
      "ConstraintDescription": "ddd:hh24:mi-hh24:mi, eg Mon:23:59-Tue:01:24"
    },
    "RdsAppsInstanceBackupRetentionPeriod": {
      "Type": "Number",
      "Default": "90",
      "MinValue": "5",
      "MaxValue": "3650"
    },
    "RdsAppsInstanceEngine": {
      "Type": "String",
      "Default": "postgres",
      "Description": "Apps RDS Engine",
      "AllowedValues": [
        "postgres"
      ]
    },
    "RdsAppsInstanceSnapshotIdentifier": {
      "Type": "String",
      "Default": "",
      "Description": "Apps RDS snapshot identifier - for restores",
      "AllowedPattern": "^([a-z0-9:.-]+)?$",
      "ConstraintDescription": "AWS RDS snapshot identifier, or empty to create a new database"
    },
    "RdsAppsInstanceSize": {
      "Type": "String",
      "Default": "db.t2.medium",
      "Description": "Apps RDS Size (instance size affects max_connections)",
      "AllowedValues": [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large",
        "db.m4.large",
        "db.m4.xlarge"
      ]
    },
    "RdsAppsInstanceStorageSize": {
      "Type": "Number",
      "Default": "25",
      "MinValue": "5",
      "MaxValue": "6144"
    },
    "RdsAppsInstanceName": {
      "Type": "String",
      "Description" : "Apps RDS Instance Name",
      "Default": "cf_instance_rds_database",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "^[A-Za-z][^\"@]*$",
      "ConstraintDescription": "Alphanumeric characters only and must start with a letter"
    },
    "RdsAppsInstanceUsername": {
      "Type": "String",
      "Default": "postgres",
      "Description": "Apps RDS user",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[A-Za-z][A-Za-z0-9]+$",
      "ConstraintDescription": "Alphanumeric characters only and must start with a letter"
    },
    "RdsAppsInstancePassword": {
      "Type": "String",
      "Default": "password",
      "Description": "Apps RDS password",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[^\"@]+$",
      "ConstraintDescription": "Can be any printable ASCII character except \"/\", \"\"\", or \"@\""
    },
    "RdsCfInstanceBackupRetentionPeriod": {
      "Type": "Number",
      "Default": "90",
      "MinValue": "5",
      "MaxValue": "3650"
    },
    "RdsCfInstanceEngine": {
      "Type": "String",
      "Default": "postgres",
      "Description": "Cloudfoundry RDS Engine",
      "AllowedValues": [
        "postgres"
      ]
    },
    "RdsCfInstanceSnapshotIdentifier": {
      "Type": "String",
      "Default": "",
      "Description": "Cloudfoundry RDS snapshot identifier - for restores",
      "AllowedPattern": "^([a-z0-9:.-]+)?$",
      "ConstraintDescription": "AWS RDS snapshot identifier, or empty to create a new database"
    },
    "RdsCfInstanceSize": {
      "Type": "String",
      "Default": "db.t2.medium",
      "Description": "Cloudfoundry RDS Size (instance size affects max_connections)",
      "AllowedValues": [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large",
        "db.m4.large",
        "db.m4.xlarge"
      ]
    },
    "RdsCfInstanceStorageSize": {
      "Type": "Number",
      "Default": "25",
      "MinValue": "5",
      "MaxValue": "6144"
    },
    "RdsCfInstanceName": {
      "Type": "String",
      "Default": "cf_instance_rds_database",
      "Description" : "Cloudfoundry RDS Instance Name",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "^[A-Za-z][^\"@]*$",
      "ConstraintDescription": "Alphanumeric characters only and must start with a letter"
    },
    "RdsCfInstanceUsername": {
      "Type": "String",
      "Default": "postgres",
      "Description": "Cloudfoundry RDS user",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[A-Za-z][A-Za-z0-9]+$",
      "ConstraintDescription": "Alphanumeric characters only and must start with a letter"
    },
    "RdsCfInstancePassword": {
      "Type": "String",
      "Default": "password",
      "Description": "Cloudfoundry RDS password",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[^\"@]+$",
      "ConstraintDescription": "Can be any printable ASCII character except \"/\", \"\"\", or \"@\""
    },
    "Organisation": {
      "Type": "String",
      "Description": "Organisation Name",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[A-Za-z0-9 -]+$",
      "ConstraintDescription": "Can be any printable alphanumeric character, spaces or hypens"
    },

    "StackProtectionGroup": {
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128",
      "Description": "Stack protection group",
      "Default": "NONE",
      "AllowedPattern": "^[A-Za-z0-9-]+$",
      "ConstraintDescription": "Can valid group name"
    },
    "StackDeleteAllowDeny": {
      "Type": "String",
      "Default": "Deny",
      "Description": "Deletion Policy Allow/Deny",
      "AllowedValues": [ "Allow", "Deny" ]
    },
    "StackUpdateAllowDeny": {
      "Type": "String",
      "Default": "Deny",
      "Description": "Update Policy Allow/Deny",
      "AllowedValues": [ "Allow", "Deny" ]
    }
  },

  "Outputs": {
    "AwsRegion": {
      "Description": "AWS Region",
      "Value": { "Ref": "AWS::Region" }
    },
    "AwsAvailabilityZone1": {
      "Description": "AWS Availability Zone 1",
      "Value": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] }
    },
    "AwsAvailabilityZone2": {
      "Description": "AWS Availability Zone 2",
      "Value": { "Fn::Select": [ { "Fn::Select": [ "1", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] }
    },
    "AwsAvailabilityZone3": {
      "Description": "AWS Availability Zone 3",
      "Value": { "Fn::Select": [ { "Fn::Select": [ "2", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] }
    },
    "StackName": {
      "Description": "Stack name",
      "Value": { "Ref": "AWS::StackName" }
    },
    "DeploymentName": {
      "Description": "Deployment name",
      "Value": { "Ref": "DeploymentName" }
    },
    "DmzAz1Subnet": {
      "Description": "DMZ AZ1 Subnet",
      "Value": { "Ref": "DmzAz1Subnet" }
    },
    "DmzAz2Subnet": {
      "Description": "DMZ AZ2 Subnet",
      "Condition": "MultiAzOrElb",
      "Value": { "Ref": "DmzAz2Subnet" }
    },
    "PrivateAz1Subnet": {
      "Description": "Private AZ1 Subnet",
      "Value": { "Ref": "PrivateAz1Subnet" }
    },
    "PrivateAz2Subnet": {
      "Description": "Private AZ2 Subnet",
      "Condition": "MultiAz",
      "Value": { "Ref": "PrivateAz2Subnet" }
    },
    "PrivateAz3Subnet": {
      "Description": "Private AZ3 Subnet",
      "Condition": "MultiAz",
      "Value": { "Ref": "PrivateAz3Subnet" }
    },
    "RabbitmqServicesAz1Subnet": {
      "Description": "RabbitMQ Services AZ1 Subnet",
      "Condition": "CreateRabbitmqNetworks",
      "Value": { "Ref": "RabbitmqServicesAz1Subnet" }
    },
    "RabbitmqServicesAz2Subnet": {
      "Description": "RabbitMQ Services AZ2 Subnet",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Value": { "Ref": "RabbitmqServicesAz2Subnet" }
    },
    "DmzAz1CidrPrefix": {
      "Description": "DMZ AZ1 CIDR",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ "0", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "DmzCidrs" } ] } ] } ] },
            { "Fn::Select": [ "1", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "DmzCidrs" } ] } ] } ] },
            { "Fn::Select": [ "2", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "DmzCidrs" } ] } ] } ] }
          ]
        ]
      }
    },
    "DmzAz2CidrPrefix": {
      "Description": "DMZ AZ2 CIDR",
      "Condition": "MultiAzOrElb",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ "0", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "DmzCidrs" } ] } ] } ] },
            { "Fn::Select": [ "1", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "DmzCidrs" } ] } ] } ] },
            { "Fn::Select": [ "2", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "DmzCidrs" } ] } ] } ] }
          ]
        ]
      }
    },
    "PrivateAz1CidrPrefix": {
      "Description": "Private AZ1 CIDR",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ "0", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] } ] } ] },
            { "Fn::Select": [ "1", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] } ] } ] },
            { "Fn::Select": [ "2", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] } ] } ] }
          ]
        ]
      }
    },
    "PrivateAz2CidrPrefix": {
      "Description": "Private AZ2 CIDR",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ "0", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] } ] } ] },
            { "Fn::Select": [ "1", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] } ] } ] },
            { "Fn::Select": [ "2", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] } ] } ] }
          ]
        ]
      }
    },
    "PrivateAz3CidrPrefix": {
      "Description": "Private AZ3 CIDR",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ "0", { "Fn::Split": [ ".", { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] } ] } ] },
            { "Fn::Select": [ "1", { "Fn::Split": [ ".", { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] } ] } ] },
            { "Fn::Select": [ "2", { "Fn::Split": [ ".", { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] } ] } ] }
          ]
        ]
      }
    },
    "RabbitmqServicesAz1CidrPrefix": {
      "Description": "RabbitMQ Services AZ1 CIDR Prefix",
      "Condition": "CreateRabbitmqNetworks",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ "0", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "RabbitmqServicesCidrs" } ] } ] } ] },
            { "Fn::Select": [ "1", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "RabbitmqServicesCidrs" } ] } ] } ] },
            { "Fn::Select": [ "2", { "Fn::Split": [ ".", { "Fn::Select": [ "0", { "Ref": "RabbitmqServicesCidrs" } ] } ] } ] }
          ]
        ]
      }
    },
    "RabbitmqServicesAz2CidrPrefix": {
      "Description": "RabbitMQ Services AZ2 CIDR Prefix",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ "0", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "RabbitmqServicesCidrs" } ] } ] } ] },
            { "Fn::Select": [ "1", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "RabbitmqServicesCidrs" } ] } ] } ] },
            { "Fn::Select": [ "2", { "Fn::Split": [ ".", { "Fn::Select": [ "1", { "Ref": "RabbitmqServicesCidrs" } ] } ] } ] }
          ]
        ]
      }
    },
    "ApiDns": {
      "Description": "API DNS name",
      "Value": { "Fn::Sub": "api.system.${DeploymentName}.${HostedZone}" }
    },
    "DirectorDns": {
      "Description": "Director DNS name",
      "Value": { "Fn::Sub": "director.${DeploymentName}.${HostedZone}" }
    },
    "UaaDns": {
      "Description": "API DNS name",
      "Value": { "Fn::Sub": "uaa.system.${DeploymentName}.${HostedZone}" }
    },
    "DirectorSecurityGroup": {
      "Description": "Director Security Groups",
      "Value": { "Ref": "DirectorSecurityGroup" }
    },
    "DmzSecurityGroup": {
      "Description": "DMZ Security Groups",
      "Value": { "Ref": "DmzSecurityGroup" }
    },
    "LbSecurityGroup": {
      "Description": "LB Security Groups",
      "Value": { "Ref": "LbSecurityGroup" }
    },
    "PrivateSecurityGroup": {
      "Description": "Private Security Groups",
      "Value": { "Ref": "PrivateSecurityGroup" }
    },
    "RabbitmqServicesSecurityGroup": {
      "Description": "RabbitMQ Services Security Groups",
      "Condition": "CreateRabbitmqNetworks",
      "Value": { "Ref": "RabbitmqServicesSecurityGroup" }
    },
    "DomainName": {
      "Description": "Main DNS name",
      "Value": { "Fn::Sub": "${DeploymentName}.${HostedZone}" }
    },
    "BoshLitePublicIp": {
      "Description": "Elastic IP 1 - Bosh Lite (Bootstrap)",
      "Value": { "Ref": "BoshLitePublicIp" }
    },
    "ExternalIpAz1": {
      "Description": "LB external IP 1",
      "Condition": "AllocateLbIp",
      "Value": { "Ref": "ExternalAz1Ip" }
    },
    "ExternalIpAz2": {
      "Description": "LB external IP 2",
      "Condition": "MultiAzAndAllocateLbIp",
      "Value": { "Ref": "ExternalAz2Ip" }
    },
    "MultiAz": {
      "Description": "Multi AZ?",
      "Value": {
        "Fn::If": [
          "MultiAz",
          "true",
          "false"
        ]
      }
    },
    "RdsSubnetGroup": {
      "Description": "RDS Database Subnet Group",
      "Value": { "Ref": "RdsSubnetGroup" }
    },
    "RdsSecurityGroup": {
      "Description": "RDS Database Security Group",
      "Value": { "Ref": "RdsSecurityGroup" }
    },
    "RdsAppsInstanceAddress": {
      "Description": "Applications  RDS Access Address",
      "Condition": "DeployRdsInstance",
      "Value": { "Fn::GetAtt": [ "RdsAppsInstance", "Endpoint.Address" ] }
    },
    "RdsAppsInstancePort": {
      "Description": "Applications  RDS Port",
      "Condition": "DeployRdsInstance",
      "Value": { "Fn::GetAtt": [ "RdsAppsInstance", "Endpoint.Port" ] }
    },
    "RdsCfInstanceAddress": {
      "Description": "Cloudfoundry RDS Access Address",
      "Condition": "DeployRdsInstance",
      "Value": { "Fn::GetAtt": [ "RdsCfInstance", "Endpoint.Address" ] }
    },
    "RdsCfInstancePort": {
      "Description": "Cloudfoundry RDS Port",
      "Condition": "DeployRdsInstance",
      "Value": { "Fn::GetAtt": [ "RdsCfInstance", "Endpoint.Port" ] }
    },
    "ElastiCacheBrokerAccessKeyId": {
      "Description": "ElastiCache Broker Access Key Id",
      "Condition": "CreateElastiCacheNetworks",
      "Value": { "Ref": "ElastiCacheBrokerAccessKey" }
    },
    "ElastiCacheBrokerAccessKey": {
      "Description": "ElastiCache Broker Access Key",
      "Condition": "CreateElastiCacheNetworks",
      "Value": { "Fn::GetAtt": [ "ElastiCacheBrokerAccessKey", "SecretAccessKey" ] }
    },
    "ElastiCacheSubnetGroup": {
      "Description": "ElastiCache Subnet Group",
      "Condition": "CreateElastiCacheNetworks",
      "Value": { "Ref": "ElastiCacheSubnetGroup" }
    },
    "ElastiCacheBrokerUserName": {
      "Description": "ElastiCache Broker User Name",
      "Condition": "CreateElastiCacheNetworks",
      "Value": { "Ref": "ElastiCacheBrokerUser" }
    },
    "RdsBrokerAccessKeyId": {
      "Description": "RDS Broker Access Key Id",
      "Condition": "DeployRdsInstance",
      "Value": { "Ref": "RdsBrokerAccessKey" }
    },
    "RdsBrokerAccessKey": {
      "Description": "RDS Broker Access Key",
      "Condition": "DeployRdsInstance",
      "Value": { "Fn::GetAtt": [ "RdsBrokerAccessKey", "SecretAccessKey" ] }
    },
    "RdsBrokerUserName": {
      "Description": "RDS Broker User Name",
      "Condition": "DeployRdsInstance",
      "Value": { "Ref": "RdsBrokerUser" }
    },
    "S3BucketAccessInstanceProfile": {
      "Description": "S3 Bucket Access Instance Profile",
      "Value": { "Ref": "S3BucketAccessInstanceProfile" }
    },
    "BlobstoreBucket": {
      "Description": "S3 Blobstore Bucket",
      "Value": { "Ref": "BlobstoreBucket" }
    },
    "BuildpackBucket": {
      "Description": "S3 Buildpack Bucket",
      "Value": { "Ref": "BuildpackBucket" }
    },
    "DropletBucket": {
      "Description": "S3 Droplet Bucket",
      "Value": { "Ref": "DropletBucket" }
    },
    "PackageBucket": {
      "Description": "S3 Package Bucket",
      "Value": { "Ref": "PackageBucket" }
    },
    "ResourceBucket": {
      "Description": "S3 Resource Bucket",
      "Value": { "Ref": "ResourceBucket" }
    },
    "S3Buckets": {
      "Description": "S3 Buckets - used during stack deletion",
      "Value": {
        "Fn::Join": [
          ",", [
            { "Ref": "BlobstoreBucket" },
            { "Ref": "BuildpackBucket" },
            { "Ref": "DropletBucket" },
            { "Ref": "PackageBucket" },
            { "Ref": "ResourceBucket" }
          ]
        ]
      }
    },
    "ExternalElb": {
      "Description": "External ELB",
      "Condition": "DeployElb",
      "Value": {
        "Fn::If": [
          "GenerateElbSslCertificate",
          { "Ref": "ExternalAcmSslElb" },
          {
            "Fn::If": [
              "UseElbSslCertificateArn",
              { "Ref": "ExternalExistingSslElb" },
              { "Ref": "ExternalPlainTextElb" }
            ]
          }
        ]
      }
    }
  },

  "Conditions": {
    "PermitFullAccessCidr1": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccessCidr1" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccessCidr2": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccessCidr2" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccessCidr3": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccessCidr3" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccessCidr4": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccessCidr4" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccessCidr5": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccessCidr5" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccessCidr6": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccessCidr6" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitHttpAccessCidr1": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "HttpAccessCidr1" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitHttpAccessCidr2": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "HttpAccessCidr2" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitHttpAccessCidr3": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "HttpAccessCidr3" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitHttpAccessCidr4": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "HttpAccessCidr4" }, "127.0.0.0/8" ] }
      ]
    },
    "GenerateElbSslCertificate": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "GenerateElbSslCertificate" }, "true" ] },
	{ "Fn::Equals": [ { "Ref": "ElbSslCertificateArn" }, "NONE" ] }
      ]
    },
    "UseElbSslCertificateArn": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "GenerateElbSslCertificate" }, "false" ] },
        { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ElbSslCertificateArn" }, "NONE" ] } ] }
      ]
    },
    "PlainTextElb": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "GenerateElbSslCertificate" }, "false" ] },
        { "Fn::Equals": [ { "Ref": "ElbSslCertificateArn" }, "NONE" ] }
      ]
    },
    "AllocateLbIp": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "AllocateLbIp" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "false" ] }
      ]
    },

    "DeployElb": { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] },
    "CreateElastiCacheNetworks": { "Fn::Equals": [ { "Ref": "CreateElastiCacheNetworks" }, "true" ] },
    "CreateRabbitmqNetworks": { "Fn::Equals": [ { "Ref": "CreateRabbitmqNetworks" }, "true" ] },
    "DeployRdsInstance": { "Fn::Equals": [ { "Ref": "CreateRdsNetworks" }, "true" ] },
    "StackProtection": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "StackProtectionGroup" }, "NONE" ] } ] },

    "MultiAzAndCreateElastiCacheNetworks": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] }, 
        { "Fn::Equals": [ { "Ref": "CreateElastiCacheNetworks" }, "true" ] }
      ]
    },
    "MultiAzAndCreateRabbitmqNetworks": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] }, 
        { "Fn::Equals": [ { "Ref": "CreateRabbitmqNetworks" }, "true" ] } 
      ]
    },
    "MultiAzAndDeployRdsInstance": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] }, 
        { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "RdsCfInstanceSize" }, "NONE" ] } ] }
      ]
    },
    "MultiAz": { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] },
    "MultiAzOrElb": {
      "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "true" ] }
      ]
    },
    "MultiAzAndAllocateLbIp": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "AllocateLbIp" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "DeployElb" }, "false" ] }
      ]
    },
    "SingleAz": { "Fn::Equals": [ { "Ref": "MultiAz" }, "false" ] },
    "SingleAzAndAllocateLbIp": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "false" ] },
        { "Fn::Equals": [ { "Ref": "AllocateLbIp" }, "true" ] }
      ]
    },
    "SingleAzAndDeployRdsInstance": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "false" ] }, 
        { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "RdsCfInstanceSize" }, "NONE" ] } ] }
      ]
    }
  },

  "Resources": {
    "DirectorWhitelistCidr1": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr1",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr1" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "DirectorWhitelistCidr2": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr2",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr2" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "DirectorWhitelistCidr3": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr3",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr3" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "DirectorWhitelistCidr4": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr4",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr4" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "DirectorWhitelistCidr5": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr5",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr5" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "DirectorWhitelistCidr6": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr6",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr6" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistLbAccessCidr1": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr1",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr1" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistLbAccessCidr2": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr2",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr2" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistLbAccessCidr3": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr3",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr3" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistLbAccessCidr4": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr4",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr4" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistLbAccessCidr5": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr5",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr5" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistLbAccessCidr6": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccessCidr6",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "FullAccessCidr6" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistHttpAccessCidr1": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitHttpAccessCidr1",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "false",
          "AllowDirectorAccess": "false",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "HttpAccessCidr1" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistHttpAccessCidr2": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitHttpAccessCidr2",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "false",
          "AllowDirectorAccess": "false",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "HttpAccessCidr2" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistHttpAccessCidr3": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitHttpAccessCidr3",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "false",
          "AllowDirectorAccess": "false",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "HttpAccessCidr3" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistHttpAccessCidr4": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitHttpAccessCidr4",
      "Properties": {
        "Parameters": {
          "AllowCfSshAccess": "false",
          "AllowDirectorAccess": "false",
          "DirectorSecurityGroup": { "Ref": "DirectorSecurityGroup" },
          "LbSecurityGroup": { "Ref": "LbSecurityGroup" },
          "WhitelistedCidr": { "Ref": "HttpAccessCidr4" }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": { "Fn::Sub": "${AWS::StackName}-preamble-TemplatesBucketHttpUrl" }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },

    "CloudFoundryVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref": "VpcCidr" },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": false,
        "InstanceTenancy": "default",
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:CloudFoundryVpc" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "ElastiCacheServicesAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateElastiCacheNetworks",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "ElastiCacheCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ElastiCacheServicesAz1Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "ElastiCacheServicesAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateElastiCacheNetworks",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "1", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "ElastiCacheCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ElastiCacheServicesAz2Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "NatAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "NatCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:NatAz1Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "NatAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "MultiAz",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "1", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "NatCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:NatAz2Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "NatAz3Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "MultiAz",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "2", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "NatCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:NatAz3Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "DmzAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "DmzCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DmzAz1Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "DmzAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "MultiAzOrElb",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "1", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "DmzCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DmzAz2Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "PrivateAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:PrivateAz1Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "PrivateAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "MultiAz",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "1", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:PrivateAz2Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "PrivateAz3Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "MultiAz",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "2", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:PrivateAz3Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RabbitmqServicesAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "RabbitmqServicesCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RabbitmqServicesAz1Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RabbitmqServicesAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "1", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "RabbitmqServicesCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RabbitmqServicesAz2Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RdsServicesAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "RdsServicesCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RdsServicesAz1Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RdsServicesAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "1", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "RdsServicesCidrs" } ] },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RdsServicesAz2Subnet" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "ElbSslCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "GenerateElbSslCertificate",
      "Properties": {
        "DomainName": { "Fn::Sub": "*.apps.${DeploymentName}.${HostedZone}" },
        "SubjectAlternativeNames": [
          { "Fn::Sub": "*.system.${DeploymentName}.${HostedZone}" }
        ],
        "DomainValidationOptions" : [
          {
            "DomainName": { "Fn::Sub": "*.apps.${DeploymentName}.${HostedZone}" },
            "ValidationDomain" : { "Ref": "HostedZone" }
          },
          {
            "DomainName": { "Fn::Sub": "*.system.${DeploymentName}.${HostedZone}" },
            "ValidationDomain" : { "Ref": "HostedZone" }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ElbSslCertificate" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "ExternalAcmSslElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "GenerateElbSslCertificate",
      "Properties": {
        "Scheme": { "Ref": "ElbScheme" },
        "Subnets": [
          { "Ref": "DmzAz1Subnet" },
          { "Ref": "DmzAz2Subnet" }
        ],
        "Listeners": [
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "Protocol": "HTTP" },
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "443", "Protocol": "HTTPS", "SSLCertificateId": { "Ref": "ElbSslCertificate"  } }
	],
        "ConnectionDrainingPolicy": {
          "Enabled" : "true",
          "Timeout" : { "Ref": "ElbTimeout" }
        },
        "SecurityGroups": [ { "Ref": "LbSecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ExternalElb" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "ExternalExistingSslElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "UseElbSslCertificateArn",
      "Properties": {
        "Scheme": { "Ref": "ElbScheme" },
        "Subnets": [
          { "Ref": "DmzAz1Subnet" },
          { "Ref": "DmzAz2Subnet" }
        ],
        "Listeners": [
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "Protocol": "HTTP" },
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "443", "Protocol": "HTTPS", "SSLCertificateId": { "Ref": "ElbSslCertificateArn"  } }
	],
        "ConnectionDrainingPolicy": {
          "Enabled" : "true",
          "Timeout" : { "Ref": "ElbTimeout" }
        },
        "SecurityGroups": [ { "Ref": "LbSecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ExternalElb" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "ExternalPlainTextElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "PlainTextElb",
      "Properties": {
        "Scheme": { "Ref": "ElbScheme" },
        "Subnets": [
          { "Ref": "DmzAz1Subnet" },
          { "Ref": "DmzAz2Subnet" }
        ],
        "Listeners": [
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "Protocol": "HTTP" }
	],
        "ConnectionDrainingPolicy": {
          "Enabled" : "true",
          "Timeout" : { "Ref": "ElbTimeout" }
        },
        "SecurityGroups": [ { "Ref": "LbSecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ExternalElb" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },


    "BoshLitePublicIp": {
      "Type": "AWS::EC2::EIP"
    },
    "NatAz1Ip": {
      "Type": "AWS::EC2::EIP"
    },
    "NatAz2Ip": {
      "Type": "AWS::EC2::EIP",
      "Condition": "MultiAz"
    },
    "NatAz3Ip": {
      "Type": "AWS::EC2::EIP",
      "Condition": "MultiAz"
    },
    "ExternalAz1Ip": {
      "Type": "AWS::EC2::EIP",
      "Condition": "AllocateLbIp"
    },
    "ExternalAz2Ip": {
      "Type": "AWS::EC2::EIP",
      "Condition": "MultiAzAndAllocateLbIp"
    },

    "AppsExternalElbGeneratedSslDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "GenerateElbSslCertificate",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.apps.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalAcmSslElb",
              "DNSName"
            ]
          }
        ]
      }
    },
    "AppsExternalElbExistingSslDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "UseElbSslCertificateArn",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.apps.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalExistingSslElb",
              "DNSName"
            ]
          }
        ]
      }
    },
    "AppsExternalElbPlainTextDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "PlainTextElb",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.apps.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalPlainTextElb",
              "DNSName"
            ]
          }
        ]
      }
    },

    "AppsExternalSingleIpDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "SingleAzAndAllocateLbIp",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.apps.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "ExternalAz1Ip" }
        ]
      }
    },
    "AppsExternalMultiIpDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAzAndAllocateLbIp",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.apps.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "ExternalAz1Ip" },
          { "Ref": "ExternalAz2Ip" }
        ]
      }
    },
    "BoshDnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "director.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "BoshLitePublicIp" }
        ]
      }
    },
    "NatSingleAzDnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "SingleAz",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "nat.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz1Ip" }
        ]
      }
    },
    "NatMultiAzDnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAz",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "nat.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz1Ip" },
          { "Ref": "NatAz2Ip" },
          { "Ref": "NatAz3Ip" }
        ]
      }
    },
    "NatAz1DnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "nat-z1.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz1Ip" }
        ]
      }
    },
    "NatAz2DnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAz",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "nat-z2.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz2Ip" }
        ]
      }
    },
    "NatAz3DnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAz",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "nat-z3.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz3Ip" }
        ]
      }
    },
    "SystemExternalElbGenerateSslDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "GenerateElbSslCertificate",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.system.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalAcmSslElb",
              "DNSName"
            ]
          }
        ]
      }
    },
    "SystemExternalElbExistingSslDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "UseElbSslCertificateArn",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.system.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          { "Fn::Sub": "${ExternalExistingSslElb.DNSName}" }
        ]
      }
    },
    "SystemExternalElbPlainTextDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "PlainTextElb",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.system.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          { "Fn::Sub": "${ExternalPlainTextElb.DNSName}" }
        ]
      }
    },
    "SystemExternalSingleAzIpDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "SingleAzAndAllocateLbIp",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.system.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [ { "Ref": "ExternalAz1Ip" } ]
      }
    },
    "SystemExternalMultiAzIpDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAzAndAllocateLbIp",
      "Properties": {
        "HostedZoneName": { "Fn::Sub": "${HostedZone}." },
        "Name": { "Fn::Sub": "*.system.${DeploymentName}.${HostedZone}" },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "ExternalAz1Ip" },
          { "Ref": "ExternalAz2Ip" }
        ]
      }
    },

    "NatAz1Gateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatAz1Ip", "AllocationId" ] },
        "SubnetId": { "Ref": "NatAz1Subnet" }
      }
    },
    "NatAz2Gateway": {
      "Type": "AWS::EC2::NatGateway",
      "Condition": "MultiAz",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatAz2Ip", "AllocationId" ] },
        "SubnetId": { "Ref": "NatAz2Subnet" }
      }
    },
    "NatAz3Gateway": {
      "Type": "AWS::EC2::NatGateway",
      "Condition": "MultiAz",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatAz3Ip", "AllocationId" ] },
        "SubnetId": { "Ref": "NatAz3Subnet" }
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:InternetGateway" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "InternetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:InternetRouteTable" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "DmzAz1RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DmzAz1RouteTable" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "DmzAz2RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Condition": "MultiAzOrElb",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DmzAz2RouteTable" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "NatAz1RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:NatAz1RouteTable" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "NatAz2RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Condition": "MultiAz",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:NatAz2RouteTable" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "NatAz3RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Condition": "MultiAz",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:NatAz3RouteTable" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "DmzAz1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "DmzAz1Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "DmzAz2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAzOrElb",
      "Properties": {
        "SubnetId": { "Ref": "DmzAz2Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "NatAz1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "NatAz1Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "NatAz2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAz",
      "Properties": {
        "SubnetId": { "Ref": "NatAz2Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "NatAz3SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAz",
      "Properties": {
        "SubnetId": { "Ref": "NatAz3Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "PrivateAz1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateAz1Subnet" },
        "RouteTableId": { "Ref": "NatAz1RouteTable" }
      }
    },
    "PrivateAz2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAz",
      "Properties": {
        "SubnetId": { "Ref": "PrivateAz2Subnet" },
        "RouteTableId": { "Ref": "NatAz2RouteTable" }
      }
    },
    "PrivateAz3SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAz",
      "Properties": {
        "SubnetId": { "Ref": "PrivateAz3Subnet" },
        "RouteTableId": { "Ref": "NatAz2RouteTable" }
      }
    },
    "RabbitmqServicesAz1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "SubnetId": { "Ref": "RabbitmqServicesAz1Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "RabbitmqServicesAz2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "SubnetId": { "Ref": "RabbitmqServicesAz2Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },

    "InternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "NatAz1InternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NatAz1Gateway" },
        "RouteTableId": { "Ref": "NatAz1RouteTable" }
      }
    },
    "NatAz2InternetRoute": {
      "Type": "AWS::EC2::Route",
      "Condition": "MultiAz",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NatAz2Gateway" },
        "RouteTableId": { "Ref": "NatAz2RouteTable" }
      }
    },
    "NatAz3InternetRoute": {
      "Type": "AWS::EC2::Route",
      "Condition": "MultiAz",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NatAz3Gateway" },
        "RouteTableId": { "Ref": "NatAz3RouteTable" }
      }
    },

    "DmzSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "DMZ In Out",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "SecurityGroupEgress": [
          { "CidrIp": "0.0.0.0/0", "FromPort": "0", "ToPort": "65535", "IpProtocol": "-1" }
        ],
        "SecurityGroupIngress": [
          { "CidrIp": { "Ref": "VpcCidr" }, "FromPort": "0", "ToPort": "65535" , "IpProtocol": "-1" }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DmzSecurityGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "DirectorSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Director Security Group",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "SecurityGroupEgress": [
          { "CidrIp": "0.0.0.0/0", "FromPort": "80", "ToPort": "80", "IpProtocol": "tcp" },
          { "CidrIp": "0.0.0.0/0", "FromPort": "443", "ToPort": "443", "IpProtocol": "tcp" }
        ],
        "SecurityGroupIngress": [
          { "CidrIp": { "Ref": "VpcCidr" }, "FromPort": "0", "ToPort": "65535" , "IpProtocol": "-1" }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DirectorSecurityGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "ElastiCacheSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "CreateElastiCacheNetworks",
      "Properties": {
        "GroupDescription": "ElastiCache Security Group",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ElastiCacheSecurityGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "LbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "DeployElb",
      "Properties": {
        "GroupDescription": "ELB Security Group",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "SecurityGroupEgress": [
          { "CidrIp": "0.0.0.0/0", "FromPort": "0", "ToPort": "65535", "IpProtocol": "-1" }
        ],
        "SecurityGroupIngress": [
          { "CidrIp": { "Ref": "VpcCidr" }, "FromPort": "0", "ToPort": "65535" , "IpProtocol": "-1" }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:LbSecurityGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "ExternalSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "External In Out",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "SecurityGroupEgress": [
          { "CidrIp": "0.0.0.0/0", "FromPort": "0", "ToPort": "65535", "IpProtocol": "-1" }
        ],
        "SecurityGroupIngress": [
          { "CidrIp": { "Ref": "VpcCidr" }, "FromPort": "0", "ToPort": "65535" , "IpProtocol": "-1" }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ExternalSecurityGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "PrivateSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Private In Out",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "SecurityGroupEgress": [
          { "CidrIp": "0.0.0.0/0", "FromPort": "0", "ToPort": "65535", "IpProtocol": "-1" }
        ],
        "SecurityGroupIngress": [
          { "CidrIp": { "Ref": "VpcCidr" }, "FromPort": "0", "ToPort": "65535" , "IpProtocol": "-1" }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:PrivateSecurityGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RabbitmqServicesSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupDescription": "RabbitMQ Services In Out",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RabbitmqServicesSecurityGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RdsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "GroupDescription": "RDS Security Group",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RdsSecurityGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "Director22PrivateAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Director22PrivateAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Director22PrivateAz3SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Director22RabbitmqAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "RabbitmqServicesCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Director22RabbitmqAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "RabbitmqServicesCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8080PrivateAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8080",
        "ToPort": "8080",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8080PrivateAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8080",
        "ToPort": "8080",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8080PrivateAz3SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8080",
        "ToPort": "8080",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8081PrivateAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8081",
        "ToPort": "8081",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8081PrivateAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8081",
        "ToPort": "8081",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8081PrivateAz3SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8081",
        "ToPort": "8081",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8443PrivateAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8443",
        "ToPort": "8443",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8443PrivateAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8443",
        "ToPort": "8443",
        "IpProtocol": "tcp"
      }
    },
    "Dmz8443PrivateAz3SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8443",
        "ToPort": "8443",
        "IpProtocol": "tcp"
      }
    },
    "Dmz9022PrivateAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "9022",
        "ToPort": "9022",
        "IpProtocol": "tcp"
      }
    },
    "Dmz9022PrivateAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "9022",
        "ToPort": "9022",
        "IpProtocol": "tcp"
      }
    },
    "Dmz9022PrivateAz3SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DmzSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "9022",
        "ToPort": "9022",
        "IpProtocol": "tcp"
      }
    },
    "Lb22PrivateAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Lb22PrivateAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Lb22PrivateAz3SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Lb4567PrivateAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "4567",
        "ToPort": "4567",
        "IpProtocol": "tcp"
      }
    },
    "Lb4567PrivateAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "4567",
        "ToPort": "4567",
        "IpProtocol": "tcp"
      }
    },
    "Lb4567PrivateAz3SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "4567",
        "ToPort": "4567",
        "IpProtocol": "tcp"
      }
    },
    "Lb15672PrivateAz1SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15672",
        "ToPort": "15672",
        "IpProtocol": "tcp"
      }
    },
    "Lb15672PrivateAz2SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15672",
        "ToPort": "15672",
        "IpProtocol": "tcp"
      }
    },
    "Lb15672PrivateAz3SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15672",
        "ToPort": "15672",
        "IpProtocol": "tcp"
      }
    },

    "Director4222PrivateAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "4222",
        "ToPort": "4222",
        "IpProtocol": "tcp"
      }
    },
    "Director4222PrivateAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "4222",
        "ToPort": "4222",
        "IpProtocol": "tcp"
      }
    },
    "Director4222PrivateAz3SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "4222",
        "ToPort": "4222",
        "IpProtocol": "tcp"
      }
    },
    "Director4222RabbitmqAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "RabbitmqCidrs" } ] },
        "FromPort": "4222",
        "ToPort": "4222",
        "IpProtocol": "tcp"
      }
    },
    "Director4222RabbitmqAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "RabbitmqCidrs" } ] },
        "FromPort": "4222",
        "ToPort": "4222",
        "IpProtocol": "tcp"
      }
    },
    "Director25250PrivateAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "25250",
        "ToPort": "25250",
        "IpProtocol": "tcp"
      }
    },
    "Director25250PrivateAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "25250",
        "ToPort": "25250",
        "IpProtocol": "tcp"
      }
    },
    "Director25250PrivateAz3SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "25250",
        "ToPort": "25250",
        "IpProtocol": "tcp"
      }
    },
    "Director25250RabbitmqAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "RabbitmqCidrs" } ] },
        "FromPort": "25250",
        "ToPort": "25250",
        "IpProtocol": "tcp"
      }
    },
    "Director25250RabbitmqAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "RabbitmqCidrs" } ] },
        "FromPort": "25250",
        "ToPort": "25250",
        "IpProtocol": "tcp"
      }
    },
    "Director25777PrivateAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "25777",
        "ToPort": "25777",
        "IpProtocol": "tcp"
      }
    },
    "Director25777PrivateAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "25777",
        "ToPort": "25777",
        "IpProtocol": "tcp"
      }
    },
    "Director25777PrivateAz3SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "25777",
        "ToPort": "25777",
        "IpProtocol": "tcp"
      }
    },
    "Director25777RabbitmqAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "RabbitmqCidrs" } ] },
        "FromPort": "25777",
        "ToPort": "25777",
        "IpProtocol": "tcp"
      }
    },
    "Director25777RabbitmqAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "DirectorSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "RabbitmqCidrs" } ] },
        "FromPort": "25777",
        "ToPort": "25777",
        "IpProtocol": "tcp"
      }
    },
    "ElastiCache6379PrivateAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateElastiCacheNetworks",
      "Properties": {
        "GroupId": { "Ref": "ElastiCacheSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "6379",
        "ToPort": "6379",
        "IpProtocol": "tcp"
      }
    },
    "ElastiCachei6379PrivateAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateElastiCacheNetworks",
      "Properties": {
        "GroupId": { "Ref": "ElastiCacheSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "6379",
        "ToPort": "6379",
        "IpProtocol": "tcp"
      }
    },
    "ElastiCachei6379PrivateAz3SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateElastiCacheNetworks",
      "Properties": {
        "GroupId": { "Ref": "ElastiCacheSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "6379",
        "ToPort": "6379",
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz1RdsCfInstanceIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": { "Fn::GetAtt": [ "RdsCfInstance", "Endpoint.Port" ] },
        "ToPort": { "Fn::GetAtt": [ "RdsCfInstance", "Endpoint.Port" ] },
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz2RdsCfInstanceIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndDeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": { "Fn::GetAtt": [ "RdsCfInstance", "Endpoint.Port" ] },
        "ToPort": { "Fn::GetAtt": [ "RdsCfInstance", "Endpoint.Port" ] },
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz3RdsCfInstanceIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndDeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": { "Fn::GetAtt": [ "RdsCfInstance", "Endpoint.Port" ] },
        "ToPort": { "Fn::GetAtt": [ "RdsCfInstance", "Endpoint.Port" ] },
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz1RdsAppsInstanceIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": { "Fn::GetAtt": [ "RdsAppsInstance", "Endpoint.Port" ] },
        "ToPort": { "Fn::GetAtt": [ "RdsAppsInstance", "Endpoint.Port" ] },
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz2RdsAppsInstanceIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndDeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": { "Fn::GetAtt": [ "RdsAppsInstance", "Endpoint.Port" ] },
        "ToPort": { "Fn::GetAtt": [ "RdsAppsInstance", "Endpoint.Port" ] },
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz3RdsAppsInstanceIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndDeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": { "Fn::GetAtt": [ "RdsAppsInstance", "Endpoint.Port" ] },
        "ToPort": { "Fn::GetAtt": [ "RdsAppsInstance", "Endpoint.Port" ] },
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq22PrivateAz1Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq22PrivateAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq22PrivateAz3Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq1883PrivateAz1Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "1883",
        "ToPort": "1883",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq1883PrivateAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "1883",
        "ToPort": "1883",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq1883PrivateAz3Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "1883",
        "ToPort": "1883",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq56715672PrivateAz1Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "5671",
        "ToPort": "5672",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq56715672PrivateAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "5671",
        "ToPort": "5672",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq56715672PrivateAz3Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "5671",
        "ToPort": "5672",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq8883PrivateAz1Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8883",
        "ToPort": "8883",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq8883PrivateAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8883",
        "ToPort": "8883",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq8883PrivateAz3Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "8883",
        "ToPort": "8883",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq61613PrivateAz1Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "61613",
        "ToPort": "61613",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq61613PrivateAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "61613",
        "ToPort": "61613",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq61613PrivateAz3Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "61613",
        "ToPort": "61613",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq61614PrivateAz1Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "61614",
        "ToPort": "61614",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq61614PrivateAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "61614",
        "ToPort": "61614",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq61614PrivateAz3Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "61614",
        "ToPort": "61614",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq15672PrivateAz1Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15672",
        "ToPort": "15672",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq15672PrivateAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15672",
        "ToPort": "15672",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq15672PrivateAz3Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15672",
        "ToPort": "15672",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq15674PrivateAz1Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "CreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15674",
        "ToPort": "15674",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq15674PrivateAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "1", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15674",
        "ToPort": "15674",
        "IpProtocol": "tcp"
      }
    },
    "Rabbitmq15674PrivateAz3Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndCreateRabbitmqNetworks",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrBlock": { "Fn::Select": [ "2", { "Ref": "PrivateCidrs" } ] },
        "FromPort": "15674",
        "ToPort": "15674",
        "IpProtocol": "tcp"
      }
    },

    "RdsSubnetGroup": {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Condition": "DeployRdsInstance",
      "Properties" : {
        "DBSubnetGroupDescription" : "RDS Subnet Group",
        "SubnetIds" : [
          { "Ref": "RdsServicesAz1Subnet" },
          { "Ref": "RdsServicesAz2Subnet" }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RdsSubnetGroup" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "ElastiCacheSubnetGroup": {
      "Type" : "AWS::ElastiCache::SubnetGroup",
      "Condition": "CreateElastiCacheNetworks",
      "Properties" : {
        "Description": "ElastiCache Subnet Group",
        "SubnetIds" : [
          { "Ref": "ElastiCacheServicesAz1Subnet" },
          { "Ref": "ElastiCacheServicesAz2Subnet" }
        ]
      }
    },

    "RdsAppsInstance": {
      "Type" : "AWS::RDS::DBInstance",
      "Condition": "SingleAzAndDeployRdsInstance",
      "Properties": {
        "DBInstanceIdentifier": { "Fn::Sub": "${DeploymentName}-ApplicationDB" },
        "DBInstanceClass": { "Ref": "RdsAppsInstanceSize" },
        "AllocatedStorage": { "Ref": "RdsAppsInstanceStorageSize" },
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "BackupRetentionPeriod": { "Ref": "RdsAppsInstanceBackupRetentionPeriod" },
        "CopyTagsToSnapshot": "true",
        "Engine": { "Ref": "RdsAppsInstanceEngine" },
        "DBSubnetGroupName": { "Ref": "RdsSubnetGroup" },
        "DBSnapshotIdentifier": { "Ref": "RdsAppsInstanceSnapshotIdentifier" },
        "MasterUsername": { "Ref": "RdsAppsInstanceUsername" },
        "MasterUserPassword": { "Ref": "RdsAppsInstancePassword" },
        "PreferredBackupWindow": { "Ref": "RdsInstancePreferredBackupWindow" },
        "PreferredMaintenanceWindow": { "Ref": "RdsInstancePreferredMaintenanceWindow" },
        "VPCSecurityGroups": [ { "Ref": "RdsSecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RdsAppsInstance" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RdsAppsInstance": {
      "Type" : "AWS::RDS::DBInstance",
      "Condition": "MultiAzAndDeployRdsInstance",
      "Properties": {
        "DBInstanceIdentifier": { "Fn::Sub": "${DeploymentName}-ApplicationDB" },
        "DBInstanceClass": { "Ref": "RdsAppsInstanceSize" },
        "AllocatedStorage": { "Ref": "RdsAppsInstanceStorageSize" },
        "BackupRetentionPeriod": { "Ref": "RdsAppsInstanceBackupRetentionPeriod" },
        "CopyTagsToSnapshot": "true",
        "DBSubnetGroupName": { "Ref": "RdsSubnetGroup" },
        "DBSnapshotIdentifier": { "Ref": "RdsAppsInstanceSnapshotIdentifier" },
        "Engine": { "Ref": "RdsAppsInstanceEngine" },
        "MasterUsername": { "Ref": "RdsAppsInstanceUsername" },
        "MasterUserPassword": { "Ref": "RdsAppsInstancePassword" },
        "MultiAZ": "true",
        "PreferredBackupWindow": { "Ref": "RdsInstancePreferredBackupWindow" },
        "PreferredMaintenanceWindow": { "Ref": "RdsInstancePreferredMaintenanceWindow" },
        "VPCSecurityGroups": [ { "Ref": "RdsSecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RdsAppsInstance" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RdsCfInstance": {
      "Type" : "AWS::RDS::DBInstance",
      "Condition": "SingleAzAndDeployRdsInstance",
      "Properties": {
        "DBInstanceIdentifier": { "Fn::Sub": "${DeploymentName}-CloudfoundryDB" },
        "DBInstanceClass": { "Ref": "RdsCfInstanceSize" },
        "AllocatedStorage": { "Ref": "RdsCfInstanceStorageSize" },
        "AvailabilityZone": { "Fn::Select": [ { "Fn::Select": [ "0", { "Ref": "AwsAvailabilityZones" } ] },{ "Fn::GetAZs": "AWS::Region" } ] },
        "BackupRetentionPeriod": { "Ref": "RdsCfInstanceBackupRetentionPeriod" },
        "CopyTagsToSnapshot": "true",
        "Engine": { "Ref": "RdsCfInstanceEngine" },
        "DBSubnetGroupName": { "Ref": "RdsSubnetGroup" },
        "DBSnapshotIdentifier": { "Ref": "RdsCfInstanceSnapshotIdentifier" },
        "MasterUsername": { "Ref": "RdsCfInstanceUsername" },
        "MasterUserPassword": { "Ref": "RdsCfInstancePassword" },
        "PreferredBackupWindow": { "Ref": "RdsPreferredBackupWindow" },
        "PreferredMaintenanceWindow": { "Ref": "RdsCfInstancePreferredMaintenanceWindow" },
        "VPCSecurityGroups": [ { "Ref": "RdsSecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RdsCfInstance" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "RdsCfInstance": {
      "Type" : "AWS::RDS::DBInstance",
      "Condition": "MultiAzAndDeployRdsInstance",
      "Properties": {
        "DBInstanceIdentifier": { "Fn::Sub": "${DeploymentName}-CloudfoundryDB" },
        "DBInstanceClass": { "Ref": "RdsCfInstanceSize" },
        "AllocatedStorage": { "Ref": "RdsCfInstanceStorageSize" },
        "BackupRetentionPeriod": { "Ref": "RdsCfInstanceBackupRetentionPeriod" },
        "CopyTagsToSnapshot": "true",
        "DBSubnetGroupName": { "Ref": "RdsSubnetGroup" },
        "DBSnapshotIdentifier": { "Ref": "RdsCfInstanceSnapshotIdentifier" },
        "Engine": { "Ref": "RdsCfInstanceEngine" },
        "MasterUsername": { "Ref": "RdsCfInstanceUsername" },
        "MasterUserPassword": { "Ref": "RdsCfInstancePassword" },
        "MultiAZ": "true",
        "PreferredBackupWindow": { "Ref": "RdsInstancePreferredBackupWindow" },
        "PreferredMaintenanceWindow": { "Ref": "RdsInstancePreferredMaintenanceWindow" },
        "VPCSecurityGroups": [ { "Ref": "RdsSecurityGroup" } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:RdsCfInstance" } },
          { "Key": "Deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },



    "BlobstoreBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "BuildpackBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "DropletBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "PackageBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "ResourceBucket": {
      "Type": "AWS::S3::Bucket"
    },

    "S3BucketAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "S3BucketAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    { "Fn::Sub": "arn:aws:s3:::${BlobstoreBucket}" },
                    { "Fn::Sub": "arn:aws:s3:::${BlobstoreBucket}/*" },
                    { "Fn::Sub": "arn:aws:s3:::${BuildpackBucket}" },
                    { "Fn::Sub": "arn:aws:s3:::${BuildpackBucket}/*" },
                    { "Fn::Sub": "arn:aws:s3:::${DropletBucket}" },
                    { "Fn::Sub": "arn:aws:s3:::${DropletBucket}/*" },
                    { "Fn::Sub": "arn:aws:s3:::${PackageBucket}" },
                    { "Fn::Sub": "arn:aws:s3:::${PackageBucket}/*" },
                    { "Fn::Sub": "arn:aws:s3:::${ResourceBucket}" },
                    { "Fn::Sub": "arn:aws:s3:::${ResourceBucket}/*" }
                  ]
                }
              ]
            }
          }
        ]
      }
    },

    "S3BucketAccessInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          { "Ref": "S3BucketAccessRole" }
        ]
      }
    },

    "PreventStackDeletion": {
      "Type": "AWS::IAM::Policy",
      "Condition": "StackProtection",
      "Properties": {
        "PolicyName": "PreventStackDeletion",
        "Groups": [ { "Ref": "StackProtectionGroup" } ],
        "PolicyDocument": {
          "Version":"2012-10-17",
          "Statement": [
            {
              "Effect": { "Ref": "StackDeleteAllowDeny" },
              "Action": [
		"Delete:*",
		"cloudformation:DeleteStack"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "PreventStackUpdate": {
      "Type": "AWS::IAM::Policy",
      "Condition": "StackProtection",
      "Properties": {
        "PolicyName": "PreventStackDeletion",
        "Groups": [ { "Ref": "StackProtectionGroup" } ],
        "PolicyDocument": {
          "Version":"2012-10-17",
          "Statement": [
            {
              "Effect": { "Ref": "StackUpdateAllowDeny" },
              "Action": [
		"Update:*",
		"cloudformation:UpdateStack"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },

    "ElastiCacheBrokerUser": {
      "Type": "AWS::IAM::User",
      "Condition": "CreateElastiCacheNetworks",
      "Properties": {
        "Policies": [
          {
            "PolicyName": { "Fn::Sub": "${DeploymentName}-CfElastiCachePolicy" },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "elasticache:CreateCacheCluster",
                    "elasticache:CreateReplicationGroup",
                    "elasticache:DeleteCacheCluster",
                    "elasticache:DescribeCacheClusters",
                    "elasticache:ModifyCacheCluster",
                    "elasticache:RebootCacheCluster"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "iam:GetUser"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RdsBrokerUser": {
      "Type": "AWS::IAM::User",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "Policies": [
          {
            "PolicyName": { "Fn::Sub": "${DeploymentName}-CfRdsPolicy" },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "rds:DescribeDBInstances",
                    "rds:CreateDBInstance",
                    "rds:ModifyDBInstance",
                    "rds:DeleteDBInstance",
                    "rds:DescribeDBClusters",
                    "rds:CreateDBCluster",
                    "rds:ModifyDBCluster",
                    "rds:DeleteDBCluster",
                    "rds:AddTagsToResource"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "iam:GetUser"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "ElastiCacheBrokerAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Condition": "CreateElastiCacheNetworks",
      "Properties": {
        "UserName": { "Ref": "ElastiCacheBrokerUser" }
      }
    },
    "RdsBrokerAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "UserName": { "Ref": "RdsBrokerUser" }
      }
    }
  }
}
