{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Bosh",

  "Parameters": {
    "DeploymentName": {
      "Type": "String",
      "Default": "v2",
      "Description": "Deployment Name",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "^([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]$",
      "ConstraintDescription": "Must be a valid domain label matching /^([A-Za-z0-9]+[A-Za-z0-9-])+[A-Za-z0-9]$/"
    },

    "MultiAz": {
      "Type": "String",
      "Default": "true",
      "Description": "Deploy multiple AZs",
      "AllowedPattern": "^(true|false)$",
      "ConstraintDescription": "true or false"
    },
    "AwsAvailabilityZone1": {
      "Type": "Number",
      "Default": "0",
      "Description": "Availability Zone 1 Number",
      "MinValue": "0",
      "MaxValue": "9"
    },
    "AwsAvailabilityZone2": {
      "Type": "Number",
      "Default": "1",
      "Description": "Availability Zone 2 Number",
      "MinValue": "0",
      "MaxValue": "9"
    },

    "AllocateExternalIp": {
      "Type": "String",
      "Default": "true",
      "Description": "Allocate External IP (eg for HA Proxy)",
      "AllowedPattern": "^(true|false)$",
      "ConstraintDescription": "true or false"
    },
    "DeployExternalElb": {
      "Type": "String",
      "Default": "true",
      "Description": "Deploy External ELB",
      "AllowedPattern": "^(true|false)$",
      "ConstraintDescription": "true or false"
    },

    "GenerateElbSslCertificate": {
      "Type": "String",
      "Default": "false",
      "Description": "Generate AWS SSL certificate - requires manual intervention to validate request email",
      "AllowedPattern": "^(true|false)$",
      "ConstraintDescription": "true or false"
    },
    "ElbSslCertificateArn": {
      "Type": "String",
      "Default": "NONE",
      "Description": "Use pre-loaded SSL certificate - unless one is loaded or GenerateElbSslCertificate set to true an ELB will not be created",
      "AllowedPattern": "^(arn:aws::iam::[0-9]+:server-certificate/[0-9]+:[A-Za-z0-9-]+|NONE)$",
      "ConstraintDescription": "AWS ACM SSL certificate ARN or NONE"
    },

    "HostedZone": {
      "Type": "String",
      "Description": "DNS Zone",
      "AllowedPattern": "^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+[A-Za-z0-9]{2,}$",
      "ConstraintDescription": "Must be a valid domain name matching /^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+([A-Za-z0-9]{2,}$/"
    },

    "FullAccess1Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted Full Access CIDR 1",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccess2Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted Full Access CIDR 2",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccess3Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted Full Access CIDR 3",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccess4Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted Full Access CIDR 4",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccess5Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted Full Access CIDR 5",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "FullAccess6Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted Full Access CIDR 6",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },


    "HttpAccess1Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted HTTP(S) Access CIDR 1/g",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "HttpAccess2Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted HTTP(S) Access CIDR 2/g",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "HttpAccess3Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted HTTP(S) Access CIDR 3/g",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "HttpAccess4Cidr": {
      "Type": "String",
      "Default": "127.0.0.0/8",
      "Description": "Whitelisted HTTP(S) Access CIDR 4/g",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },

    "VpcCidr": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "VPC CIDR",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "ElastiCacheServicesAz1Cidr": {
      "Type": "String",
      "Default": "10.0.10.0/24",
      "Description": "ElastiCache AZ1 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "ElastiCacheServicesAz2Cidr": {
      "Type": "String",
      "Default": "10.0.110.0/24",
      "Description": "ElastiCache AZ2 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "NatAz1Cidr": {
      "Type": "String",
      "Default": "10.0.20.0/24",
      "Description": "NAT AZ1 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "NatAz2Cidr": {
      "Type": "String",
      "Default": "10.0.120.0/24",
      "Description": "NAT AZ2 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "PrivateAz1Cidr": {
      "Type": "String",
      "Default": "10.0.40.0/24",
      "Description": "Private AZ1 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "PrivateAz2Cidr": {
      "Type": "String",
      "Default": "10.0.140.0/24",
      "Description": "Private AZ2 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "RabbitmqServicesAz1Cidr": {
      "Type": "String",
      "Default": "10.0.50.0/24",
      "Description": "RabbitMQ Services AZ1 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "RabbitmqServicesAz2Cidr": {
      "Type": "String",
      "Default": "10.0.150.0/24",
      "Description": "RabbitMQ Services AZ2 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "RdsServicesAz1Cidr": {
      "Type": "String",
      "Default": "10.0.60.0/24",
      "Description": "RDS Services AZ1 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },
    "RdsServicesAz2Cidr": {
      "Type": "String",
      "Default": "10.0.160.0/24",
      "Description": "RDS Services AZ2 Subnet",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$",
      "ConstraintDescription": "Valid CIDR"
    },

    "RdsInstanceSize": {
      "Type": "String",
      "Default": "NONE",
      "Description": "RDS Instance Size",
      "AllowedValues": [
        "NONE",
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large",
        "db.m4.large",
        "db.m4.xlarge"
      ]
    },
    "ElastiCacheInstanceSize": {
      "Type": "String",
      "Default": "NONE",
      "Description": "ElastiCache Instance Size",
      "AllowedValues": [
        "NONE",
        "cache.t2.micro",
        "cache.t2.small",
        "cache.t2.medium",
        "cache.t2.large",
        "cache.m4.large",
        "cache.m4.xlarge"
      ]
    },

    "RdsStorageSize": {
      "Type": "Number",
      "Default": "5",
      "MinValue": "5",
      "MaxValue": "6144"
    },
    "RdsName": {
      "Description" : "RDS Instance Name",
      "Default": "rds_database",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "^[A-Za-z][^\"@]*$",
      "ConstraintDescription": "Alphanumeric characters only and must start with a letter"
    },
    "RdsUsername": {
      "Type": "String",
      "Default": "postgres",
      "Description": "RDS user",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[A-Za-z][A-Za-z0-9]+$",
      "ConstraintDescription": "Alphanumeric characters only and must start with a letter"
    },
    "RdsPassword": {
      "Type": "String",
      "Default": "password",
      "Description": "RDS password",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[^\"@]+$",
      "ConstraintDescription": "Can be any printable ASCII character except \"/\", \"\"\", or \"@\""
    },
    "Organisation": {
      "Type": "String",
      "Description": "Organisation Name",
      "MinLength": "1",
      "MaxLength": "63",
      "AllowedPattern": "^[A-Za-z0-9 -]+$",
      "ConstraintDescription": "Can be any printable alphanumeric character, spaces or hypens"
    }
  },


  "Outputs": {
    "AwsRegion": {
      "Description": "AWS Region",
      "Value": { "Ref": "AWS::Region" }
    },
    "AwsAvailabilityZone1": {
      "Description": "AWS Availability Zone 1",
      "Value": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone1" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] }
    },
    "AwsAvailabilityZone2": {
      "Description": "AWS Availability Zone 2",
      "Value": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone2" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] }
    },
    "StackName": {
      "Description": "Stack name",
      "Value": { "Ref": "AWS::StackName" }
    },
    "StackArn": {
      "Description": "Stack ARN",
      "Value": { "Ref": "AWS::StackId" }
    },
    "DeploymentName": {
      "Description": "Deployment name",
      "Value": { "Ref": "DeploymentName" }
    },
    "NatAz1Subnet": {
      "Description": "NAT AZ1 Subnet",
      "Value": { "Ref": "NatAz1Subnet" }
    },
    "NatAz2Subnet": {
      "Description": "NAT AZ2 Subnet",
      "Condition": "MultiAz",
      "Value": { "Ref": "NatAz2Subnet" }
    },
    "PrivateAz1Subnet": {
      "Description": "Private AZ1 Subnet",
      "Value": { "Ref": "PrivateAz1Subnet" }
    },
    "PrivateAz2Subnet": {
      "Description": "Private AZ2 Subnet",
      "Condition": "MultiAzOrElb",
      "Value": { "Ref": "PrivateAz2Subnet" }
    },
    "RabbitmqServicesAz1Subnet": {
      "Description": "RabbitMQ Services AZ1 Subnet",
      "Value": { "Ref": "RabbitmqServicesAz1Subnet" }
    },
    "RabbitmqServicesAz2Subnet": {
      "Description": "RabbitMQ Services AZ2 Subnet",
      "Condition": "MultiAz",
      "Value": { "Ref": "RabbitmqServicesAz2Subnet" }
    },
    "PrivateAz1CidrPrefix": {
      "Description": "Private AZ1 CIDR",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "PrivateAz1Cidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "PrivateAz1Cidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "PrivateAz1Cidr" } ] } ] }
          ]
        ]
      }
    },
    "PrivateAz2CidrPrefix": {
      "Description": "Private AZ2 CIDR",
      "Condition": "MultiAzOrElb",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "PrivateAz2Cidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "PrivateAz2Cidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "PrivateAz2Cidr" } ] } ] }
          ]
        ]
      }
    },
    "PrivateAz1DefaultRoute": {
      "Description": "Private AZ1 Default Route",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "PrivateAz1Cidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "PrivateAz1Cidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "PrivateAz1Cidr" } ] } ] },
            "1"
          ]
        ]
      }
    },
    "PrivateAz2DefaultRoute": {
      "Description": "Private AZ2 Default Route",
      "Condition": "MultiAzOrElb",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "PrivateAz2Cidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "PrivateAz2Cidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "PrivateAz2Cidr" } ] } ] },
            "1"
          ]
        ]
      }
    },
    "RabbitmqServicesAz1CidrPrefix": {
      "Description": "RabbitMQ Services AZ1 CIDR Prefix",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz1Cidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz1Cidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz1Cidr" } ] } ] }
          ]
        ]
      }
    },
    "RabbitmqServicesAz2CidrPrefix": {
      "Description": "RabbitMQ Services AZ2 CIDR Prefix",
      "Condition": "MultiAz",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz2Cidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz2Cidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz2Cidr" } ] } ] }
          ]
        ]
      }
    },
    "RabbitmqServicesAz1DefaultRoute": {
      "Description": "RabbitMQ Services AZ1 Default Route",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz1Cidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz1Cidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz1Cidr" } ] } ] },
            "1"
          ]
        ]
      }
    },
    "RabbitmqServicesAz2DefaultRoute": {
      "Description": "RabbitMQ Services AZ2 Default Route",
      "Condition": "MultiAz",
      "Value": {
	"Fn::Join": [
          ".", [
            { "Fn::Select": [ 0, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz2Cidr" } ] } ] },
            { "Fn::Select": [ 1, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz2Cidr" } ] } ] },
            { "Fn::Select": [ 2, { "Fn::Split": [ ".", { "Ref": "RabbitmqServicesAz2Cidr" } ] } ] },
            "1"
          ]
        ]
      }
    },
    "ApiDns": {
      "Description": "API DNS name",
      "Value": {
        "Fn::Join": [
          ".", [
            "api",
            "system",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "DirectorDns": {
      "Description": "Director DNS name",
      "Value": {
        "Fn::Join": [
          ".", [
            "director",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "NatAz1Dns": {
      "Description": "NAT AZ1 DNS name",
      "Value": { "Fn::Join": [
          ".", [
            "nat-z1",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "NatAz2Dns": {
      "Description": "NAT AZ2 DNS name",
      "Condition": "MultiAz",
      "Value": { "Fn::Join": [
          ".", [
            "nat-z2",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "UaaDns": {
      "Description": "API DNS name",
      "Value": {
        "Fn::Join": [
          ".", [
            "uaa",
            "system",
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "ElastiCacheServicesAz1Subnet": {
      "Description": "ElastiCache AZ1 Subnet",
      "Condition": "DeployElastiCacheInstance",
      "Value": { "Ref": "ElastiCacheServicesAz1Subnet" }
    },
    "ElastiCacheServicesAz2Subnet": {
      "Description": "ElastiCache AZ2 Subnet",
      "Condition": "DeployElastiCacheInstance",
      "Value": { "Ref": "ElastiCacheServicesAz2Subnet" }
    },
    "RdsServicesAz1Subnet": {
      "Description": "RDS Services AZ1 Subnet",
      "Condition": "DeployRdsInstance",
      "Value": { "Ref": "RdsServicesAz1Subnet" }
    },
    "RdsServicesAz2Subnet": {
      "Description": "RDS Services AZ2 Subnet",
      "Condition": "DeployRdsInstance",
      "Value": { "Ref": "RdsServicesAz2Subnet" }
    },
    "RdsSubnetGroup": {
      "Description": "RDS Subnet Group",
      "Condition": "DeployRdsInstance",
      "Value": { "Ref": "RdsSubnetGroup" }
    },
    "RdsSecurityGroup": {
      "Description": "RDS Security Group",
      "Condition": "DeployRdsInstance",
      "Value": { "Ref": "RdsSecurityGroup" }
    },
    "ExternalElbs": {
      "Description": "External ELB(s)",
      "Condition": "DeployExternalElb",
      "Value": {
        "Fn::Join": [
          "", [
            "[",
            {
              "Fn::Join": [
                "", [
                  "\"",
                  {
                    "Fn::If": [
                      "GenerateElbSslCertificate",
                      { "Ref": "ExternalAcmSslElb" },
                      {
                        "Fn::If": [
                          "UseElbSslCertificateArn",
                          { "Ref": "ExternalExistingSslElb" },
                          { "Ref": "ExternalPlainTextElb" }
                        ]
                      }
                    ]
                  },
                  "\""
                ]
              ]
            },
            "]"
          ]
        ]
      }
    },
    "HttpSecurityGroup": {
      "Description": "HTTP(S) Access Security Groups",
      "Value": {
        "Fn::Join": [
          "", [
            "[",
            { "Fn::Join": [ "", [ "\"", { "Ref": "HttpSecurityGroup" }, "\"" ] ] },
            {
              "Fn::If": [
                "PermitFullAccess1Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess1Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess2Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess2Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess3Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess3Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess4Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess4Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess5Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess5Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess6Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess6Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitHttpAccess1Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistHttpAccess1Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitHttpAccess2Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistHttpAccess2Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitHttpAccess3Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistHttpAccess3Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitHttpAccess4Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistHttpAccess4Cidr", "Outputs.HttpSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            "]"
          ]
        ]
      }
    },
    "ElastiCacheSecurityGroup": {
      "Description": "ElastiCache Security Group",
      "Value": { "Ref": "ElastiCacheSecurityGroup" }
    },
    "PrivateSecurityGroups": {
      "Description": "Private Security Groups",
      "Value": {
        "Fn::Join": [
          "", [
            "[",
            {
              "Fn::Join": [
                "", [
                  "\"",
                  { "Ref": "PrivateSecurityGroup" },
                  "\""
                ]
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess1Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess1Cidr", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess2Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess2Cidr", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess3Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess3Cidr", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess4Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess4Cidr", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess5Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess5Cidr", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            {
              "Fn::If": [
                "PermitFullAccess6Cidr",
                { "Fn::Join": [ "", [ ",", "\"", { "Fn::GetAtt": [ "WhitelistFullAccess6Cidr", "Outputs.PrivateSecurityGroup" ] }, "\"" ] ] },
                { "Ref": "AWS::NoValue" }
              ]
            },
            "]"
          ]
        ]
      }
    },
    "RabbitmqServicesSecurityGroups": {
      "Description": "RabbitMQ Services Security Groups",
      "Value": { "Ref": "RabbitmqServicesSecurityGroup" }
    },
    "DomainName": {
      "Description": "Main DNS name",
      "Value": { "Fn::Join": [
          ".", [
            { "Ref": "DeploymentName" },
            { "Ref": "HostedZone" }
          ]
        ]
      }
    },
    "BoshLitePublicIp": {
      "Description": "Elastic IP 1 - Bosh Lite (Bootstrap)",
      "Value": { "Ref": "BoshLitePublicIp" }
    },
    "NatAz1Ip": {
      "Description": "Elastic IP 2 - NAT AZ1 IP",
      "Value": { "Ref": "NatAz1Ip" }
    },
    "NatAz2Ip": {
      "Description": "Elastic IP 3 - NAT AZ2 IP",
      "Condition": "MultiAz",
      "Value": { "Ref": "NatAz2Ip" }
    },
    "ExternalIpAz1": {
      "Description": "Unallocated external IPs",
      "Condition": "AllocateExternalIp",
      "Value": { "Ref": "ExternalAz1Ip" }
    },
    "ExternalIpAz2": {
      "Description": "Unallocated external IPs",
      "Condition": "MultiAzAndAllocateExternalIp",
      "Value": { "Ref": "ExternalAz1Ip" }
    },
    "MultiAz": {
      "Description": "Multi AZ?",
      "Value": {
        "Fn::If": [
          "MultiAz",
          "1",
          "0"
        ]
      }
    },
    "RdsAddress": {
      "Description": "RDS Access Address",
      "Value": { "Fn::GetAtt": [ "RdsInstance", "Endpoint.Address" ] }
    },
    "RdsPort": {
      "Description": "RDS Port",
      "Value": { "Fn::GetAtt": [ "RdsInstance", "Endpoint.Port" ] }
    },
    "ElastiCacheBrokerAccessKeyId": {
      "Description": "ElastiCache Broker Access Key Id",
      "Condition": "DeployElastiCacheInstance",
      "Value": { "Ref": "ElastiCacheBrokerAccessKey" }
    },
    "ElastiCacheBrokerAccessKey": {
      "Description": "ElastiCache Broker Access Key",
      "Condition": "DeployElastiCacheInstance",
      "Value": { "Fn::GetAtt": [ "ElastiCacheBrokerAccessKey", "SecretAccessKey" ] }
    },
    "ElastiCacheSubnetGroup": {
      "Description": "ElastiCache Subnet Group",
      "Condition": "DeployElastiCacheInstance",
      "Value": { "Ref": "ElastiCacheSubnetGroup" }
    },
    "ElastiCacheBrokerUserName": {
      "Description": "ElastiCache Broker User Name",
      "Condition": "DeployElastiCacheInstance",
      "Value": { "Ref": "ElastiCacheBrokerUser" }
    },
    "RdsBrokerAccessKeyId": {
      "Description": "RDS Broker Access Key Id",
      "Condition": "DeployRdsInstance",
      "Value": { "Ref": "RdsBrokerAccessKey" }
    },
    "RdsBrokerAccessKey": {
      "Description": "RDS Broker Access Key",
      "Condition": "DeployRdsInstance",
      "Value": { "Fn::GetAtt": [ "RdsBrokerAccessKey", "SecretAccessKey" ] }
    },
    "RdsBrokerUserName": {
      "Description": "RDS Broker User Name",
      "Condition": "DeployRdsInstance",
      "Value": { "Ref": "RdsBrokerUser" }
    },
    "S3BucketAccessInstanceProfile": {
      "Description": "S3 Bucket Access Instance Profile",
      "Value": { "Ref": "S3BucketAccessInstanceProfile" }
    },
    "BlobstoreBucket": {
      "Description": "S3 Blobstore Bucket",
      "Value": { "Ref": "BlobstoreBucket" }
    },
    "BuildpackBucket": {
      "Description": "S3 Buildpack Bucket",
      "Value": { "Ref": "BuildpackBucket" }
    },
    "DropletBucket": {
      "Description": "S3 Droplet Bucket",
      "Value": { "Ref": "DropletBucket" }
    },
    "PackageBucket": {
      "Description": "S3 Package Bucket",
      "Value": { "Ref": "PackageBucket" }
    },
    "ResourceBucket": {
      "Description": "S3 Resource Bucket",
      "Value": { "Ref": "ResourceBucket" }
    },
    "S3Buckets": {
      "Description": "S3 Buckets - used during stack deletion",
      "Value": {
        "Fn::Join": [
          ",", [
            { "Ref": "BlobstoreBucket" },
            { "Ref": "BuildpackBucket" },
            { "Ref": "DropletBucket" },
            { "Ref": "PackageBucket" },
            { "Ref": "ResourceBucket" }
          ]
        ]
      }
    },
    "ExternalElb": {
      "Description": "External ELB",
      "Value": {
        "Fn::If": [
          "GenerateElbSslCertificate",
          { "Ref": "ExternalAcmSslElb" },
          {
            "Fn::If": [
              "UseElbSslCertificateArn",
              { "Ref": "ExternalExistingSslElb" },
              { "Ref": "ExternalPlainTextElb" }
            ]
          }
        ]
      }
    }
  },

  "Conditions": {
    "PermitFullAccess1Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccess1Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccess2Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccess2Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccess3Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccess3Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccess4Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccess4Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccess5Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccess5Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitFullAccess6Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "FullAccess6Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitHttpAccess1Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "HttpAccess1Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitHttpAccess2Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "HttpAccess2Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitHttpAccess3Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "HttpAccess3Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "PermitHttpAccess4Cidr": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "HttpAccess4Cidr" }, "127.0.0.0/8" ] }
      ]
    },
    "GenerateElbSslCertificate": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployExternalElb" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "GenerateElbSslCertificate" }, "true" ] }
      ]
    },
    "UseElbSslCertificateArn": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployExternalElb" }, "true" ] },
        { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ElbSslCertificateArn" }, "NONE" ] } ] }
      ]
    },
    "PlainTextElb": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "DeployExternalElb" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "GenerateElbSslCertificate" }, "false" ] },
        { "Fn::Equals": [ { "Ref": "ElbSslCertificateArn" }, "NONE" ] }
      ]
    },
    "AllocateExternalIp": { "Fn::Equals": [ { "Ref": "AllocateExternalIp" }, "true" ] },
    "DeployExternalElb": { "Fn::Equals": [ { "Ref": "DeployExternalElb" }, "true" ] },
    "DeployElastiCacheInstance": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ElastiCacheInstanceSize" }, "NONE" ] } ] },
    "DeployRdsInstance": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "RdsInstanceSize" }, "NONE" ] } ] },
    "MultiAzAndDeployElastiCacheInstance": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] }, 
        { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ElastiCacheInstanceSize" }, "NONE" ] } ] }
      ]
    },
    "MultiAzAndDeployRdsInstance": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] }, 
        { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "RdsInstanceSize" }, "NONE" ] } ] }
      ]
    },
    "MultiAz": { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] },
    "MultiAzOrElb": {
      "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "DeployExternalElb" }, "true" ] }
      ]
    },
    "MultiAzAndAllocateExternalIp": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "true" ] },
        { "Fn::Equals": [ { "Ref": "AllocateExternalIp" }, "true" ] }
      ]
    },
    "SingleAz": { "Fn::Equals": [ { "Ref": "MultiAz" }, "false" ] },
    "SingleAzAndAllocateExternalIp": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "MultiAz" }, "false" ] },
        { "Fn::Equals": [ { "Ref": "AllocateExternalIp" }, "true" ] }
      ]
    }
  },

  "Resources": {
    "WhitelistFullAccess1Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccess1Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "FullAccess1Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "FullAccess1Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistFullAccess2Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccess2Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "FullAccess2Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "FullAccess2Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistFullAccess3Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccess3Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "FullAccess3Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "FullAccess3Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistFullAccess4Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccess4Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "FullAccess4Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "FullAccess4Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistFullAccess5Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccess5Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "FullAccess5Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "FullAccess5Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistFullAccess6Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitFullAccess6Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "FullAccess6Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "FullAccess6Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "true",
          "AllowDirectorAccess": "true"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistHttpAccess1Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitHttpAccess1Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "HttpAccess1Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "HttpAccess1Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "false",
          "AllowDirectorAccess": "false"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistHttpAccess2Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitHttpAccess2Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "HttpAccess2Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "HttpAccess2Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "false",
          "AllowDirectorAccess": "false"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistHttpAccess3Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitHttpAccess3Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "HttpAccess3Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "HttpAccess3Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "false",
          "AllowDirectorAccess": "false"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },
    "WhitelistHttpAccess4Cidr": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "PermitHttpAccess4Cidr",
      "Properties": {
        "Parameters": {
          "WhitelistName": {
            "Fn::Join": [
              ":", [
                { "Ref": "DeploymentName" },
                "HttpAccess4Cidr"
              ]
            ]
          },
          "WhitelistedCidr": { "Ref": "HttpAccess4Cidr" },
          "VpcId": { "Ref": "CloudFoundryVpc" },
          "AllowCfSshAccess": "false",
          "AllowDirectorAccess": "false"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/", [
	      {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-", [
                      { "Ref": "AWS::StackName" },
                      "preamble-TemplatesBucketHttpUrl"
                    ]
                  ]
                }
              },
              "Templates",
              "AWS-Bosh-whitelist-template.json"
            ]
          ]
        }
      }
    },

    "CloudFoundryVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref": "VpcCidr" },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": false,
        "InstanceTenancy": "default",
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "CloudFoundryVpc" ] ] } } ]
      }
    },

    "ElastiCacheServicesAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "DeployElastiCacheInstance",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone1" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "ElastiCacheServicesAz1Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "ElastiCacheServicesAz1Subnet" ] ] } } ]
      }
    },
    "ElastiCacheServicesAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "DeployElastiCacheInstance",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone2" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "ElastiCacheServicesAz2Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "ElastiCacheServicesAz2Subnet" ] ] } } ]
      }
    },

    "NatAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone1" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "NatAz1Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "NatAz1Subnet" ] ] } } ]
      }
    },
    "NatAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone2" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "NatAz2Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "NatAz2Subnet" ] ] } } ]
      }
    },
    "PrivateAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone1" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "PrivateAz1Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "PrivateAz1Subnet" ] ] } } ]
      }
    },
    "PrivateAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "MultiAzOrElb",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone2" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "PrivateAz2Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "PrivateAz2Subnet" ] ] } } ]
      }
    },
    "RabbitmqServicesAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone1" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "RabbitmqServicesAz1Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "RabbitmqServicesAz1Subnet" ] ] } } ]
      }
    },
    "RabbitmqServicesAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "MultiAz",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone2" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "RabbitmqServicesAz2Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "RabbitmqServicesAz2Subnet" ] ] } } ]
      }
    },
    "RdsServicesAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone1" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "RdsServicesAz1Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "RdsServicesAz1Subnet" ] ] } } ]
      }
    },
    "RdsServicesAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone2" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "CidrBlock": { "Ref": "RdsServicesAz2Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "RdsServicesAz2Subnet" ] ] } } ]
      }
    },

    "ElbSslCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "GenerateElbSslCertificate",
      "Properties": {
        "DomainName": {
          "Fn::Join": [
            ".", [
              "*",
              "apps",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "SubjectAlternativeNames": [
          {
            "Fn::Join": [
              ".", [
                "*",
                "system",
                { "Ref": "DeploymentName" },
                { "Ref": "HostedZone" }
              ]
            ]
          }
        ],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "ElbSslCertificate" ] ] } } ]
      }
    },

    "ExternalAcmSslElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "GenerateElbSslCertificate",
      "Properties": {
        "Scheme": "internal",
        "Subnets": [
          { "Ref": "PrivateAz1Subnet" },
          { "Ref": "PrivateAz2Subnet" }
        ],
        "Listeners": [
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "Protocol": "HTTP" },
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "443", "Protocol": "HTTPS", "SSLCertificateId": { "Ref": "ElbSslCertificate"  } }
	],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "ExternalELb" ] ] } } ]
      }
    },

    "ExternalExistingSslElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "UseElbSslCertificateArn",
      "Properties": {
        "Scheme": "internal",
        "Subnets": [
          { "Ref": "PrivateAz1Subnet" },
          { "Ref": "PrivateAz2Subnet" }
        ],
        "Listeners": [
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "Protocol": "HTTP" },
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "443", "Protocol": "HTTPS", "SSLCertificateId": { "Ref": "ElbSslCertificateArn"  } }
	],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "ExternalELb" ] ] } } ]
      }
    },
    "ExternalPlainTextElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "PlainTextElb",
      "Properties": {
        "Scheme": "internal",
        "Subnets": [
          { "Ref": "PrivateAz1Subnet" },
          { "Ref": "PrivateAz2Subnet" }
        ],
        "Listeners": [
          { "InstancePort": "80", "InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "Protocol": "HTTP" }
	],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "ExternalELb" ] ] } } ]
      }
    },


    "BoshLitePublicIp": {
      "Type": "AWS::EC2::EIP"
    },
    "NatAz1Ip": {
      "Type": "AWS::EC2::EIP"
    },
    "NatAz2Ip": {
      "Type": "AWS::EC2::EIP",
      "Condition": "MultiAz"
    },
    "ExternalAz1Ip": {
      "Type": "AWS::EC2::EIP",
      "Condition": "AllocateExternalIp"
    },
    "ExternalAz2Ip": {
      "Type": "AWS::EC2::EIP",
      "Condition": "MultiAzAndAllocateExternalIp"
    },

    "AppsExternalElbGeneratedSslDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "GenerateElbSslCertificate",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "apps",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalAcmSslElb",
              "DNSName"
            ]
          }
        ]
      }
    },
    "AppsExternalElbExistingSslDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "UseElbSslCertificateArn",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "apps",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalExistingSslElb",
              "DNSName"
            ]
          }
        ]
      }
    },
    "AppsExternalElbPlainTextDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "PlainTextElb",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "apps",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalPlainTextElb",
              "DNSName"
            ]
          }
        ]
      }
    },

    "AppsExternalSingleIpDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "SingleAzAndAllocateExternalIp",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "apps",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "ExternalAz1Ip" }
        ]
      }
    },
    "AppsExternalMultiIpDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAzAndAllocateExternalIp",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "apps",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "ExternalAz1Ip" },
          { "Ref": "ExternalAz2Ip" }
        ]
      }
    },
    "BoshDnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "director",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "BoshLitePublicIp" }
        ]
      }
    },
    "NatSingleAzDnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "SingleAz",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "nat",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz1Ip" }
        ]
      }
    },
    "NatMultiAzDnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAz",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "nat",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz1Ip" },
          { "Ref": "NatAz2Ip" }
        ]
      }
    },
    "NatAz1DnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "nat-z1",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz1Ip" }
        ]
      }
    },
    "NatAz2DnsRr": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAz",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "nat-z1",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "NatAz2Ip" }
        ]
      }
    },
    "SystemExternalElbGenerateSslDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "GenerateElbSslCertificate",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "system",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalAcmSslElb",
              "DNSName"
            ]
          }
        ]
      }
    },
    "SystemExternalElbExistingSslDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "DeployExternalElb",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "system",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalExistingSslElb",
              "DNSName"
            ]
          }
        ]
      }
    },
    "SystemExternalElbPlainTextDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "PlainTextElb",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "system",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ExternalPlainTextElb",
              "DNSName"
            ]
          }
        ]
      }
    },
    "SystemExternalSingleAzIpDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "SingleAzAndAllocateExternalIp",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "system",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [ { "Ref": "ExternalAz1Ip" } ]
      }
    },
    "SystemExternalMultiAzIpDnsRR": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "MultiAzAndAllocateExternalIp",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "", [
              { "Ref": "HostedZone" },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            ".", [
              "*",
              "system",
              { "Ref": "DeploymentName" },
              { "Ref": "HostedZone" }
            ]
          ]
        },
        "TTL": "3600",
        "Type": "A",
        "ResourceRecords": [
          { "Ref": "ExternalAz1Ip" },
          { "Ref": "ExternalAz2Ip" }
        ]
      }
    },

    "NatAz1Gateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatAz1Ip", "AllocationId" ] },
        "SubnetId": { "Ref": "NatAz1Subnet" }
      }
    },
    "NatAz2Gateway": {
      "Type": "AWS::EC2::NatGateway",
      "Condition": "MultiAz",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "NatAz2Ip", "AllocationId" ] },
        "SubnetId": { "Ref": "NatAz2Subnet" }
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },

    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "InternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },

    "InternetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "InternetRouteTable" ] ] } } ]
      }
    },

    "NatAz1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "NatAz1Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "NatAz2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAz",
      "Properties": {
        "SubnetId": { "Ref": "NatAz2Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "PrivateAz1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateAz1Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "PrivateAz2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAzOrElb",
      "Properties": {
        "SubnetId": { "Ref": "PrivateAz2Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "RabbitmqServicesAz1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "RabbitmqServicesAz1Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },
    "RabbitmqServicesAz2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "MultiAz",
      "Properties": {
        "SubnetId": { "Ref": "RabbitmqServicesAz2Subnet" },
        "RouteTableId": { "Ref": "InternetRouteTable" }
      }
    },

    "ElastiCacheSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "DeployElastiCacheInstance",
      "Properties": {
        "GroupDescription": "ElastiCache Security Group",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "ElastiCacheSecurityGroup" ] ] } } ]
      }
    },
    "ExternalSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "External In Out",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "ExternalSecurityGroup" ] ] } } ],
        "SecurityGroupEgress": [
          { "CidrIp": "0.0.0.0/0", "FromPort": "0", "ToPort": "65535", "IpProtocol": "-1" }
        ],
        "SecurityGroupIngress": [
          { "CidrIp": { "Ref": "VpcCidr" }, "FromPort": "0", "ToPort": "65535" , "IpProtocol": "-1" }
        ]
      }
    },
    "RdsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "GroupDescription": "RDS Security Group",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "RdsSecurityGroup" ] ] } } ]
      }
    },

    "PrivateSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Private In Out",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "PrivateSecurityGroup" ] ] } } ],
        "SecurityGroupEgress": [
          { "CidrIp": "0.0.0.0/0", "FromPort": "0", "ToPort": "65535", "IpProtocol": "-1" }
        ],
        "SecurityGroupIngress": [
          { "CidrIp": { "Ref": "VpcCidr" }, "FromPort": "0", "ToPort": "65535" , "IpProtocol": "-1" } ] }
    },

    "RabbitmqServicesSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "RabbitMQ Services In Out",
        "VpcId": { "Ref": "CloudFoundryVpc" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "RabbitmqServicesSecurityGroup" ] ] } } ]
      }
    },

    "ElastiCacheNatAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "DeployElastiCacheInstance",
      "Properties": {
        "GroupId": { "Ref": "ElastiCacheSecurityGroup" },
        "CidrIp": { "Ref": "NatAz1Cidr" },
        "FromPort": "6379",
        "ToPort": "6379",
        "IpProtocol": "tcp"
      }
    },
    "ElastiCacheNatAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndDeployElastiCacheInstance",
      "Properties": {
        "GroupId": { "Ref": "ElastiCacheSecurityGroup" },
        "CidrIp": { "Ref": "NatAz2Cidr" },
        "FromPort": "6379",
        "ToPort": "6379",
        "IpProtocol": "tcp"
      }
    },
    "ElastiCacheNatAz1SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "DeployElastiCacheInstance",
      "Properties": {
        "GroupId": { "Ref": "ElastiCacheSecurityGroup" },
        "CidrIp": { "Ref": "PrivateAz1Cidr" },
        "FromPort": "6379",
        "ToPort": "6379",
        "IpProtocol": "tcp"
      }
    },
    "ElastiCacheNatAz2SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndDeployElastiCacheInstance",
      "Properties": {
        "GroupId": { "Ref": "ElastiCacheSecurityGroup" },
        "CidrIp": { "Ref": "PrivateAz2Cidr" },
        "FromPort": "6379",
        "ToPort": "6379",
        "IpProtocol": "tcp"
      }
    },
    "ExternalSecurityAz1GroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "PermitFullAccess5Cidr",
      "Properties": {
        "GroupId": { "Ref": "ExternalSecurityGroup" },
        "CidrIp": { "Ref": "NatAz1Cidr" },
        "FromPort": "65535",
        "ToPort": "65545",
        "IpProtocol": "-1"
      }
    },
    "ExternalSecurityAz2GroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "PermitFullAccess6Cidr",
      "Properties": {
        "GroupId": { "Ref": "ExternalSecurityGroup" },
        "CidrIp": { "Ref": "NatAz2Cidr" },
        "FromPort": "65535",
        "ToPort": "65545",
        "IpProtocol": "-1"
      }
    },
    "ExternalSecurityAz1GroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "PermitFullAccess5Cidr",
      "Properties": {
        "GroupId": { "Ref": "ExternalSecurityGroup" },
        "CidrIp": { "Ref": "NatAz1Cidr" },
        "FromPort": "65535",
        "ToPort": "65545",
        "IpProtocol": "-1"
      }
    },
    "ExternalSecurityAz2GroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition": "PermitFullAccess6Cidr",
      "Properties": {
        "GroupId": { "Ref": "ExternalSecurityGroup" },
        "CidrIp": { "Ref": "NatAz2Cidr" },
        "FromPort": "65535",
        "ToPort": "65545",
        "IpProtocol": "-1"
      }
    },
    "NatAz1RdsIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrIp": { "Ref": "NatAz1Cidr" },
        "FromPort": "5432",
        "ToPort": "5432",
        "IpProtocol": "tcp"
      }
    },
    "NatAz2RdsIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndDeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrIp": { "Ref": "NatAz2Cidr" },
        "FromPort": "5432",
        "ToPort": "5432",
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz1RdsIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrIp": { "Ref": "PrivateAz1Cidr" },
        "FromPort": "5432",
        "ToPort": "5432",
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz2RdsIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndDeployRdsInstance",
      "Properties": {
        "GroupId": { "Ref": "RdsSecurityGroup" },
        "CidrIp": { "Ref": "PrivateAz2Cidr" },
        "FromPort": "5432",
        "ToPort": "5432",
        "IpProtocol": "tcp"
      }
    },
    
    "PrivateNatAz1Director6868Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "NatAz1Ip" },
        "FromPort": "6868",
        "ToPort": "6868",
        "IpProtocol": "tcp"
      }
    },
    "PrivateNatAz2Director6868Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "NatAz2Ip" },
        "FromPort": "6868",
        "ToPort": "6868",
        "IpProtocol": "tcp"
      }
    },
    "PrivateExternalAz1IpIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "AllocateExternalIp",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "ExternalAz1Ip" },
        "FromPort": "0",
        "ToPort": "65535",
        "IpProtocol": "-1"
      }
    },
    "PrivateExternalAz2IpAz2Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAzAndAllocateExternalIp",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "ExternalAz2Ip" },
        "FromPort": "0",
        "ToPort": "65535",
        "IpProtocol": "-1"
      }
    },
    "PrivateNatAz1Director25555Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "NatAz1Ip" },
        "FromPort": "25555",
        "ToPort": "25555",
        "IpProtocol": "tcp"
      }
    },
    "PrivateNatAz2Director25555Ingress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "NatAz2Ip" },
        "FromPort": "25555",
        "ToPort": "25555",
        "IpProtocol": "tcp"
      }
    },
    "PrivateNatAz1DirectorIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "NatAz1Ip" },
        "FromPort": "6868",
        "ToPort": "6868",
        "IpProtocol": "tcp"
      }
    },
    "PrivateNatAz2DirectorIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "NatAz2Ip" },
        "FromPort": "6868",
        "ToPort": "6868",
        "IpProtocol": "tcp"
      }
    },
    "PrivateNatAz1SshIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "NatAz1Ip" },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "PrivateNatAz2SshIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "CidrIp": { "Ref": "NatAz2Ip" },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz1RabbitmqSshIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrIp": { "Ref": "RabbitmqServicesAz1Cidr" },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz2RabbitmqSshIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrIp": { "Ref": "RabbitmqServicesAz2Cidr" },
        "FromPort": "22",
        "ToPort": "22",
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz1RabbitmqIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrIp": { "Ref": "RabbitmqServicesAz1Cidr" },
        "FromPort": "5671",
        "ToPort": "5672",
        "IpProtocol": "tcp"
      }
    },
    "PrivateAz2RabbitmqIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "MultiAz",
      "Properties": {
        "GroupId": { "Ref": "RabbitmqServicesSecurityGroup" },
        "CidrIp": { "Ref": "RabbitmqServicesAz2Cidr" },
        "FromPort": "5671",
        "ToPort": "5672",
        "IpProtocol": "tcp"
      }
    },

    "RdsSubnetGroup": {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Condition": "DeployRdsInstance",
      "Properties" : {
        "DBSubnetGroupDescription" : "RDS Subnet Group",
        "SubnetIds" : [
          { "Ref": "RdsServicesAz1Subnet" },
          { "Ref": "RdsServicesAz2Subnet" }
        ],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "RdsSubnetGroup" ] ] } } ]
      }
    },
    "ElastiCacheSubnetGroup": {
      "Type" : "AWS::ElastiCache::SubnetGroup",
      "Condition": "DeployElastiCacheInstance",
      "Properties" : {
        "Description": "ElastiCache Subnet Group",
        "SubnetIds" : [
          { "Ref": "ElastiCacheServicesAz1Subnet" },
          { "Ref": "ElastiCacheServicesAz2Subnet" }
        ]
      }
    },
    "RdsInstance": {
      "Type" : "AWS::RDS::DBInstance",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "DBInstanceIdentifier": {
          "Fn::Join": [
            "-", [
              { "Ref": "DeploymentName" },
              "ApplicationDB"
            ]
          ]
	},
        "DBInstanceClass": { "Ref": "RdsInstanceSize" },
        "AllocatedStorage": { "Ref": "RdsStorageSize" },
        "AvailabilityZone": { "Fn::Select" : [ { "Ref": "AwsAvailabilityZone1" }, { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
        "Engine": "postgres",
        "DBSubnetGroupName": { "Ref": "RdsSubnetGroup" },
        "MasterUsername": { "Ref": "RdsUsername" },
        "MasterUserPassword": { "Ref": "RdsPassword" },
        "VPCSecurityGroups": [ { "Ref": "RdsSecurityGroup" } ],
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ ":", [ { "Ref": "DeploymentName" }, "RdsInstance" ] ] } } ]
      }
    },

    "BlobstoreBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "BuildpackBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "DropletBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "PackageBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "ResourceBucket": {
      "Type": "AWS::S3::Bucket"
    },

    "S3BucketAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "S3BucketAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "BlobstoreBucket" } ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "BlobstoreBucket" }, "/*" ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "BuildpackBucket" } ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "BuildpackBucket" }, "/*" ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "DropletBucket" } ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "DropletBucket" }, "/*" ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "PackageBucket" } ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "PackageBucket" }, "/*" ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "ResourceBucket" } ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "ResourceBucket" }, "/*" ] ] }
                  ]
                }
              ]
            }
          }
        ]
      }
    },

    "S3BucketAccessInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          { "Ref": "S3BucketAccessRole" }
        ]
      }
    },

    "ElastiCacheBrokerUser": {
      "Type": "AWS::IAM::User",
      "Condition": "DeployElastiCacheInstance",
      "Properties": {
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "_", [
                  { "Ref": "DeploymentName" },
                  "CfElastiCachePolicy"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "elasticache:CreateCacheCluster",
                    "elasticache:CreateReplicationGroup",
                    "elasticache:DescribeCacheClusters",
                    "elasticache:ModifyCacheCluster",
                    "elasticache:RebootCacheCluster"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "iam:GetUser"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RdsBrokerUser": {
      "Type": "AWS::IAM::User",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "_", [
                  { "Ref": "DeploymentName" },
                  "CfRdsPolicy"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "rds:DescribeDBInstances",
                    "rds:CreateDBInstance",
                    "rds:ModifyDBInstance",
                    "rds:DeleteDBInstance",
                    "rds:DescribeDBClusters",
                    "rds:CreateDBCluster",
                    "rds:ModifyDBCluster",
                    "rds:DeleteDBCluster",
                    "rds:AddTagsToResource"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "iam:GetUser"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "ElastiCacheBrokerAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Condition": "DeployElastiCacheInstance",
      "Properties": {
        "UserName": { "Ref": "ElastiCacheBrokerUser" }
      }
    },
    "RdsBrokerAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Condition": "DeployRdsInstance",
      "Properties": {
        "UserName": { "Ref": "RdsBrokerUser" }
      }
    }
  }
}
